/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app/jquery.min.js":
/*!****************************************!*\
  !*** ./resources/js/app/jquery.min.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */\n!function (e, t) {\n  \"use strict\";\n\n  \"object\" == ( false ? 0 : _typeof(module)) && \"object\" == _typeof(module.exports) ? module.exports = e.document ? t(e, !0) : function (e) {\n    if (!e.document) throw new Error(\"jQuery requires a window with a document\");\n    return t(e);\n  } : t(e);\n}(\"undefined\" != typeof window ? window : this, function (C, e) {\n  \"use strict\";\n\n  var t = [],\n    E = C.document,\n    r = Object.getPrototypeOf,\n    s = t.slice,\n    g = t.concat,\n    u = t.push,\n    i = t.indexOf,\n    n = {},\n    o = n.toString,\n    v = n.hasOwnProperty,\n    a = v.toString,\n    l = a.call(Object),\n    y = {},\n    m = function m(e) {\n      return \"function\" == typeof e && \"number\" != typeof e.nodeType;\n    },\n    x = function x(e) {\n      return null != e && e === e.window;\n    },\n    c = {\n      type: !0,\n      src: !0,\n      nonce: !0,\n      noModule: !0\n    };\n  function b(e, t, n) {\n    var r,\n      i,\n      o = (n = n || E).createElement(\"script\");\n    if (o.text = e, t) for (r in c) (i = t[r] || t.getAttribute && t.getAttribute(r)) && o.setAttribute(r, i);\n    n.head.appendChild(o).parentNode.removeChild(o);\n  }\n  function w(e) {\n    return null == e ? e + \"\" : \"object\" == _typeof(e) || \"function\" == typeof e ? n[o.call(e)] || \"object\" : _typeof(e);\n  }\n  var f = \"3.4.1\",\n    k = function k(e, t) {\n      return new k.fn.init(e, t);\n    },\n    p = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n  function d(e) {\n    var t = !!e && \"length\" in e && e.length,\n      n = w(e);\n    return !m(e) && !x(e) && (\"array\" === n || 0 === t || \"number\" == typeof t && 0 < t && t - 1 in e);\n  }\n  k.fn = k.prototype = {\n    jquery: f,\n    constructor: k,\n    length: 0,\n    toArray: function toArray() {\n      return s.call(this);\n    },\n    get: function get(e) {\n      return null == e ? s.call(this) : e < 0 ? this[e + this.length] : this[e];\n    },\n    pushStack: function pushStack(e) {\n      var t = k.merge(this.constructor(), e);\n      return t.prevObject = this, t;\n    },\n    each: function each(e) {\n      return k.each(this, e);\n    },\n    map: function map(n) {\n      return this.pushStack(k.map(this, function (e, t) {\n        return n.call(e, t, e);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(s.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    eq: function eq(e) {\n      var t = this.length,\n        n = +e + (e < 0 ? t : 0);\n      return this.pushStack(0 <= n && n < t ? [this[n]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    push: u,\n    sort: t.sort,\n    splice: t.splice\n  }, k.extend = k.fn.extend = function () {\n    var e,\n      t,\n      n,\n      r,\n      i,\n      o,\n      a = arguments[0] || {},\n      s = 1,\n      u = arguments.length,\n      l = !1;\n    for (\"boolean\" == typeof a && (l = a, a = arguments[s] || {}, s++), \"object\" == _typeof(a) || m(a) || (a = {}), s === u && (a = this, s--); s < u; s++) if (null != (e = arguments[s])) for (t in e) r = e[t], \"__proto__\" !== t && a !== r && (l && r && (k.isPlainObject(r) || (i = Array.isArray(r))) ? (n = a[t], o = i && !Array.isArray(n) ? [] : i || k.isPlainObject(n) ? n : {}, i = !1, a[t] = k.extend(l, o, r)) : void 0 !== r && (a[t] = r));\n    return a;\n  }, k.extend({\n    expando: \"jQuery\" + (f + Math.random()).replace(/\\D/g, \"\"),\n    isReady: !0,\n    error: function error(e) {\n      throw new Error(e);\n    },\n    noop: function noop() {},\n    isPlainObject: function isPlainObject(e) {\n      var t, n;\n      return !(!e || \"[object Object]\" !== o.call(e)) && (!(t = r(e)) || \"function\" == typeof (n = v.call(t, \"constructor\") && t.constructor) && a.call(n) === l);\n    },\n    isEmptyObject: function isEmptyObject(e) {\n      var t;\n      for (t in e) return !1;\n      return !0;\n    },\n    globalEval: function globalEval(e, t) {\n      b(e, {\n        nonce: t && t.nonce\n      });\n    },\n    each: function each(e, t) {\n      var n,\n        r = 0;\n      if (d(e)) {\n        for (n = e.length; r < n; r++) if (!1 === t.call(e[r], r, e[r])) break;\n      } else for (r in e) if (!1 === t.call(e[r], r, e[r])) break;\n      return e;\n    },\n    trim: function trim(e) {\n      return null == e ? \"\" : (e + \"\").replace(p, \"\");\n    },\n    makeArray: function makeArray(e, t) {\n      var n = t || [];\n      return null != e && (d(Object(e)) ? k.merge(n, \"string\" == typeof e ? [e] : e) : u.call(n, e)), n;\n    },\n    inArray: function inArray(e, t, n) {\n      return null == t ? -1 : i.call(t, e, n);\n    },\n    merge: function merge(e, t) {\n      for (var n = +t.length, r = 0, i = e.length; r < n; r++) e[i++] = t[r];\n      return e.length = i, e;\n    },\n    grep: function grep(e, t, n) {\n      for (var r = [], i = 0, o = e.length, a = !n; i < o; i++) !t(e[i], i) !== a && r.push(e[i]);\n      return r;\n    },\n    map: function map(e, t, n) {\n      var r,\n        i,\n        o = 0,\n        a = [];\n      if (d(e)) for (r = e.length; o < r; o++) null != (i = t(e[o], o, n)) && a.push(i);else for (o in e) null != (i = t(e[o], o, n)) && a.push(i);\n      return g.apply([], a);\n    },\n    guid: 1,\n    support: y\n  }), \"function\" == typeof Symbol && (k.fn[Symbol.iterator] = t[Symbol.iterator]), k.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (e, t) {\n    n[\"[object \" + t + \"]\"] = t.toLowerCase();\n  });\n  var h = function (n) {\n    var e,\n      d,\n      b,\n      o,\n      i,\n      h,\n      f,\n      g,\n      w,\n      u,\n      l,\n      T,\n      C,\n      a,\n      E,\n      v,\n      s,\n      c,\n      y,\n      k = \"sizzle\" + 1 * new Date(),\n      m = n.document,\n      S = 0,\n      r = 0,\n      p = ue(),\n      x = ue(),\n      N = ue(),\n      A = ue(),\n      D = function D(e, t) {\n        return e === t && (l = !0), 0;\n      },\n      j = {}.hasOwnProperty,\n      t = [],\n      q = t.pop,\n      L = t.push,\n      H = t.push,\n      O = t.slice,\n      P = function P(e, t) {\n        for (var n = 0, r = e.length; n < r; n++) if (e[n] === t) return n;\n        return -1;\n      },\n      R = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n      M = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n      I = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n      W = \"\\\\[\" + M + \"*(\" + I + \")(?:\" + M + \"*([*^$|!~]?=)\" + M + \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + I + \"))|)\" + M + \"*\\\\]\",\n      $ = \":(\" + I + \")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + W + \")*)|.*)\\\\)|)\",\n      F = new RegExp(M + \"+\", \"g\"),\n      B = new RegExp(\"^\" + M + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + M + \"+$\", \"g\"),\n      _ = new RegExp(\"^\" + M + \"*,\" + M + \"*\"),\n      z = new RegExp(\"^\" + M + \"*([>+~]|\" + M + \")\" + M + \"*\"),\n      U = new RegExp(M + \"|>\"),\n      X = new RegExp($),\n      V = new RegExp(\"^\" + I + \"$\"),\n      G = {\n        ID: new RegExp(\"^#(\" + I + \")\"),\n        CLASS: new RegExp(\"^\\\\.(\" + I + \")\"),\n        TAG: new RegExp(\"^(\" + I + \"|[*])\"),\n        ATTR: new RegExp(\"^\" + W),\n        PSEUDO: new RegExp(\"^\" + $),\n        CHILD: new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + M + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + M + \"*(?:([+-]|)\" + M + \"*(\\\\d+)|))\" + M + \"*\\\\)|)\", \"i\"),\n        bool: new RegExp(\"^(?:\" + R + \")$\", \"i\"),\n        needsContext: new RegExp(\"^\" + M + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + M + \"*((?:-\\\\d)?\\\\d*)\" + M + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n      },\n      Y = /HTML$/i,\n      Q = /^(?:input|select|textarea|button)$/i,\n      J = /^h\\d$/i,\n      K = /^[^{]+\\{\\s*\\[native \\w/,\n      Z = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n      ee = /[+~]/,\n      te = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + M + \"?|(\" + M + \")|.)\", \"ig\"),\n      ne = function ne(e, t, n) {\n        var r = \"0x\" + t - 65536;\n        return r != r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320);\n      },\n      re = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n      ie = function ie(e, t) {\n        return t ? \"\\0\" === e ? \"\\uFFFD\" : e.slice(0, -1) + \"\\\\\" + e.charCodeAt(e.length - 1).toString(16) + \" \" : \"\\\\\" + e;\n      },\n      oe = function oe() {\n        T();\n      },\n      ae = be(function (e) {\n        return !0 === e.disabled && \"fieldset\" === e.nodeName.toLowerCase();\n      }, {\n        dir: \"parentNode\",\n        next: \"legend\"\n      });\n    try {\n      H.apply(t = O.call(m.childNodes), m.childNodes), t[m.childNodes.length].nodeType;\n    } catch (e) {\n      H = {\n        apply: t.length ? function (e, t) {\n          L.apply(e, O.call(t));\n        } : function (e, t) {\n          var n = e.length,\n            r = 0;\n          while (e[n++] = t[r++]);\n          e.length = n - 1;\n        }\n      };\n    }\n    function se(t, e, n, r) {\n      var i,\n        o,\n        a,\n        s,\n        u,\n        l,\n        c,\n        f = e && e.ownerDocument,\n        p = e ? e.nodeType : 9;\n      if (n = n || [], \"string\" != typeof t || !t || 1 !== p && 9 !== p && 11 !== p) return n;\n      if (!r && ((e ? e.ownerDocument || e : m) !== C && T(e), e = e || C, E)) {\n        if (11 !== p && (u = Z.exec(t))) if (i = u[1]) {\n          if (9 === p) {\n            if (!(a = e.getElementById(i))) return n;\n            if (a.id === i) return n.push(a), n;\n          } else if (f && (a = f.getElementById(i)) && y(e, a) && a.id === i) return n.push(a), n;\n        } else {\n          if (u[2]) return H.apply(n, e.getElementsByTagName(t)), n;\n          if ((i = u[3]) && d.getElementsByClassName && e.getElementsByClassName) return H.apply(n, e.getElementsByClassName(i)), n;\n        }\n        if (d.qsa && !A[t + \" \"] && (!v || !v.test(t)) && (1 !== p || \"object\" !== e.nodeName.toLowerCase())) {\n          if (c = t, f = e, 1 === p && U.test(t)) {\n            (s = e.getAttribute(\"id\")) ? s = s.replace(re, ie) : e.setAttribute(\"id\", s = k), o = (l = h(t)).length;\n            while (o--) l[o] = \"#\" + s + \" \" + xe(l[o]);\n            c = l.join(\",\"), f = ee.test(t) && ye(e.parentNode) || e;\n          }\n          try {\n            return H.apply(n, f.querySelectorAll(c)), n;\n          } catch (e) {\n            A(t, !0);\n          } finally {\n            s === k && e.removeAttribute(\"id\");\n          }\n        }\n      }\n      return g(t.replace(B, \"$1\"), e, n, r);\n    }\n    function ue() {\n      var r = [];\n      return function e(t, n) {\n        return r.push(t + \" \") > b.cacheLength && delete e[r.shift()], e[t + \" \"] = n;\n      };\n    }\n    function le(e) {\n      return e[k] = !0, e;\n    }\n    function ce(e) {\n      var t = C.createElement(\"fieldset\");\n      try {\n        return !!e(t);\n      } catch (e) {\n        return !1;\n      } finally {\n        t.parentNode && t.parentNode.removeChild(t), t = null;\n      }\n    }\n    function fe(e, t) {\n      var n = e.split(\"|\"),\n        r = n.length;\n      while (r--) b.attrHandle[n[r]] = t;\n    }\n    function pe(e, t) {\n      var n = t && e,\n        r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;\n      if (r) return r;\n      if (n) while (n = n.nextSibling) if (n === t) return -1;\n      return e ? 1 : -1;\n    }\n    function de(t) {\n      return function (e) {\n        return \"input\" === e.nodeName.toLowerCase() && e.type === t;\n      };\n    }\n    function he(n) {\n      return function (e) {\n        var t = e.nodeName.toLowerCase();\n        return (\"input\" === t || \"button\" === t) && e.type === n;\n      };\n    }\n    function ge(t) {\n      return function (e) {\n        return \"form\" in e ? e.parentNode && !1 === e.disabled ? \"label\" in e ? \"label\" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && ae(e) === t : e.disabled === t : \"label\" in e && e.disabled === t;\n      };\n    }\n    function ve(a) {\n      return le(function (o) {\n        return o = +o, le(function (e, t) {\n          var n,\n            r = a([], e.length, o),\n            i = r.length;\n          while (i--) e[n = r[i]] && (e[n] = !(t[n] = e[n]));\n        });\n      });\n    }\n    function ye(e) {\n      return e && \"undefined\" != typeof e.getElementsByTagName && e;\n    }\n    for (e in d = se.support = {}, i = se.isXML = function (e) {\n      var t = e.namespaceURI,\n        n = (e.ownerDocument || e).documentElement;\n      return !Y.test(t || n && n.nodeName || \"HTML\");\n    }, T = se.setDocument = function (e) {\n      var t,\n        n,\n        r = e ? e.ownerDocument || e : m;\n      return r !== C && 9 === r.nodeType && r.documentElement && (a = (C = r).documentElement, E = !i(C), m !== C && (n = C.defaultView) && n.top !== n && (n.addEventListener ? n.addEventListener(\"unload\", oe, !1) : n.attachEvent && n.attachEvent(\"onunload\", oe)), d.attributes = ce(function (e) {\n        return e.className = \"i\", !e.getAttribute(\"className\");\n      }), d.getElementsByTagName = ce(function (e) {\n        return e.appendChild(C.createComment(\"\")), !e.getElementsByTagName(\"*\").length;\n      }), d.getElementsByClassName = K.test(C.getElementsByClassName), d.getById = ce(function (e) {\n        return a.appendChild(e).id = k, !C.getElementsByName || !C.getElementsByName(k).length;\n      }), d.getById ? (b.filter.ID = function (e) {\n        var t = e.replace(te, ne);\n        return function (e) {\n          return e.getAttribute(\"id\") === t;\n        };\n      }, b.find.ID = function (e, t) {\n        if (\"undefined\" != typeof t.getElementById && E) {\n          var n = t.getElementById(e);\n          return n ? [n] : [];\n        }\n      }) : (b.filter.ID = function (e) {\n        var n = e.replace(te, ne);\n        return function (e) {\n          var t = \"undefined\" != typeof e.getAttributeNode && e.getAttributeNode(\"id\");\n          return t && t.value === n;\n        };\n      }, b.find.ID = function (e, t) {\n        if (\"undefined\" != typeof t.getElementById && E) {\n          var n,\n            r,\n            i,\n            o = t.getElementById(e);\n          if (o) {\n            if ((n = o.getAttributeNode(\"id\")) && n.value === e) return [o];\n            i = t.getElementsByName(e), r = 0;\n            while (o = i[r++]) if ((n = o.getAttributeNode(\"id\")) && n.value === e) return [o];\n          }\n          return [];\n        }\n      }), b.find.TAG = d.getElementsByTagName ? function (e, t) {\n        return \"undefined\" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : d.qsa ? t.querySelectorAll(e) : void 0;\n      } : function (e, t) {\n        var n,\n          r = [],\n          i = 0,\n          o = t.getElementsByTagName(e);\n        if (\"*\" === e) {\n          while (n = o[i++]) 1 === n.nodeType && r.push(n);\n          return r;\n        }\n        return o;\n      }, b.find.CLASS = d.getElementsByClassName && function (e, t) {\n        if (\"undefined\" != typeof t.getElementsByClassName && E) return t.getElementsByClassName(e);\n      }, s = [], v = [], (d.qsa = K.test(C.querySelectorAll)) && (ce(function (e) {\n        a.appendChild(e).innerHTML = \"<a id='\" + k + \"'></a><select id='\" + k + \"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\", e.querySelectorAll(\"[msallowcapture^='']\").length && v.push(\"[*^$]=\" + M + \"*(?:''|\\\"\\\")\"), e.querySelectorAll(\"[selected]\").length || v.push(\"\\\\[\" + M + \"*(?:value|\" + R + \")\"), e.querySelectorAll(\"[id~=\" + k + \"-]\").length || v.push(\"~=\"), e.querySelectorAll(\":checked\").length || v.push(\":checked\"), e.querySelectorAll(\"a#\" + k + \"+*\").length || v.push(\".#.+[+~]\");\n      }), ce(function (e) {\n        e.innerHTML = \"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";\n        var t = C.createElement(\"input\");\n        t.setAttribute(\"type\", \"hidden\"), e.appendChild(t).setAttribute(\"name\", \"D\"), e.querySelectorAll(\"[name=d]\").length && v.push(\"name\" + M + \"*[*^$|!~]?=\"), 2 !== e.querySelectorAll(\":enabled\").length && v.push(\":enabled\", \":disabled\"), a.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(\":disabled\").length && v.push(\":enabled\", \":disabled\"), e.querySelectorAll(\"*,:x\"), v.push(\",.*:\");\n      })), (d.matchesSelector = K.test(c = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && ce(function (e) {\n        d.disconnectedMatch = c.call(e, \"*\"), c.call(e, \"[s!='']:x\"), s.push(\"!=\", $);\n      }), v = v.length && new RegExp(v.join(\"|\")), s = s.length && new RegExp(s.join(\"|\")), t = K.test(a.compareDocumentPosition), y = t || K.test(a.contains) ? function (e, t) {\n        var n = 9 === e.nodeType ? e.documentElement : e,\n          r = t && t.parentNode;\n        return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));\n      } : function (e, t) {\n        if (t) while (t = t.parentNode) if (t === e) return !0;\n        return !1;\n      }, D = t ? function (e, t) {\n        if (e === t) return l = !0, 0;\n        var n = !e.compareDocumentPosition - !t.compareDocumentPosition;\n        return n || (1 & (n = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !d.sortDetached && t.compareDocumentPosition(e) === n ? e === C || e.ownerDocument === m && y(m, e) ? -1 : t === C || t.ownerDocument === m && y(m, t) ? 1 : u ? P(u, e) - P(u, t) : 0 : 4 & n ? -1 : 1);\n      } : function (e, t) {\n        if (e === t) return l = !0, 0;\n        var n,\n          r = 0,\n          i = e.parentNode,\n          o = t.parentNode,\n          a = [e],\n          s = [t];\n        if (!i || !o) return e === C ? -1 : t === C ? 1 : i ? -1 : o ? 1 : u ? P(u, e) - P(u, t) : 0;\n        if (i === o) return pe(e, t);\n        n = e;\n        while (n = n.parentNode) a.unshift(n);\n        n = t;\n        while (n = n.parentNode) s.unshift(n);\n        while (a[r] === s[r]) r++;\n        return r ? pe(a[r], s[r]) : a[r] === m ? -1 : s[r] === m ? 1 : 0;\n      }), C;\n    }, se.matches = function (e, t) {\n      return se(e, null, null, t);\n    }, se.matchesSelector = function (e, t) {\n      if ((e.ownerDocument || e) !== C && T(e), d.matchesSelector && E && !A[t + \" \"] && (!s || !s.test(t)) && (!v || !v.test(t))) try {\n        var n = c.call(e, t);\n        if (n || d.disconnectedMatch || e.document && 11 !== e.document.nodeType) return n;\n      } catch (e) {\n        A(t, !0);\n      }\n      return 0 < se(t, C, null, [e]).length;\n    }, se.contains = function (e, t) {\n      return (e.ownerDocument || e) !== C && T(e), y(e, t);\n    }, se.attr = function (e, t) {\n      (e.ownerDocument || e) !== C && T(e);\n      var n = b.attrHandle[t.toLowerCase()],\n        r = n && j.call(b.attrHandle, t.toLowerCase()) ? n(e, t, !E) : void 0;\n      return void 0 !== r ? r : d.attributes || !E ? e.getAttribute(t) : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;\n    }, se.escape = function (e) {\n      return (e + \"\").replace(re, ie);\n    }, se.error = function (e) {\n      throw new Error(\"Syntax error, unrecognized expression: \" + e);\n    }, se.uniqueSort = function (e) {\n      var t,\n        n = [],\n        r = 0,\n        i = 0;\n      if (l = !d.detectDuplicates, u = !d.sortStable && e.slice(0), e.sort(D), l) {\n        while (t = e[i++]) t === e[i] && (r = n.push(i));\n        while (r--) e.splice(n[r], 1);\n      }\n      return u = null, e;\n    }, o = se.getText = function (e) {\n      var t,\n        n = \"\",\n        r = 0,\n        i = e.nodeType;\n      if (i) {\n        if (1 === i || 9 === i || 11 === i) {\n          if (\"string\" == typeof e.textContent) return e.textContent;\n          for (e = e.firstChild; e; e = e.nextSibling) n += o(e);\n        } else if (3 === i || 4 === i) return e.nodeValue;\n      } else while (t = e[r++]) n += o(t);\n      return n;\n    }, (b = se.selectors = {\n      cacheLength: 50,\n      createPseudo: le,\n      match: G,\n      attrHandle: {},\n      find: {},\n      relative: {\n        \">\": {\n          dir: \"parentNode\",\n          first: !0\n        },\n        \" \": {\n          dir: \"parentNode\"\n        },\n        \"+\": {\n          dir: \"previousSibling\",\n          first: !0\n        },\n        \"~\": {\n          dir: \"previousSibling\"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(e) {\n          return e[1] = e[1].replace(te, ne), e[3] = (e[3] || e[4] || e[5] || \"\").replace(te, ne), \"~=\" === e[2] && (e[3] = \" \" + e[3] + \" \"), e.slice(0, 4);\n        },\n        CHILD: function CHILD(e) {\n          return e[1] = e[1].toLowerCase(), \"nth\" === e[1].slice(0, 3) ? (e[3] || se.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * (\"even\" === e[3] || \"odd\" === e[3])), e[5] = +(e[7] + e[8] || \"odd\" === e[3])) : e[3] && se.error(e[0]), e;\n        },\n        PSEUDO: function PSEUDO(e) {\n          var t,\n            n = !e[6] && e[2];\n          return G.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || \"\" : n && X.test(n) && (t = h(n, !0)) && (t = n.indexOf(\")\", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3));\n        }\n      },\n      filter: {\n        TAG: function TAG(e) {\n          var t = e.replace(te, ne).toLowerCase();\n          return \"*\" === e ? function () {\n            return !0;\n          } : function (e) {\n            return e.nodeName && e.nodeName.toLowerCase() === t;\n          };\n        },\n        CLASS: function CLASS(e) {\n          var t = p[e + \" \"];\n          return t || (t = new RegExp(\"(^|\" + M + \")\" + e + \"(\" + M + \"|$)\")) && p(e, function (e) {\n            return t.test(\"string\" == typeof e.className && e.className || \"undefined\" != typeof e.getAttribute && e.getAttribute(\"class\") || \"\");\n          });\n        },\n        ATTR: function ATTR(n, r, i) {\n          return function (e) {\n            var t = se.attr(e, n);\n            return null == t ? \"!=\" === r : !r || (t += \"\", \"=\" === r ? t === i : \"!=\" === r ? t !== i : \"^=\" === r ? i && 0 === t.indexOf(i) : \"*=\" === r ? i && -1 < t.indexOf(i) : \"$=\" === r ? i && t.slice(-i.length) === i : \"~=\" === r ? -1 < (\" \" + t.replace(F, \" \") + \" \").indexOf(i) : \"|=\" === r && (t === i || t.slice(0, i.length + 1) === i + \"-\"));\n          };\n        },\n        CHILD: function CHILD(h, e, t, g, v) {\n          var y = \"nth\" !== h.slice(0, 3),\n            m = \"last\" !== h.slice(-4),\n            x = \"of-type\" === e;\n          return 1 === g && 0 === v ? function (e) {\n            return !!e.parentNode;\n          } : function (e, t, n) {\n            var r,\n              i,\n              o,\n              a,\n              s,\n              u,\n              l = y !== m ? \"nextSibling\" : \"previousSibling\",\n              c = e.parentNode,\n              f = x && e.nodeName.toLowerCase(),\n              p = !n && !x,\n              d = !1;\n            if (c) {\n              if (y) {\n                while (l) {\n                  a = e;\n                  while (a = a[l]) if (x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) return !1;\n                  u = l = \"only\" === h && !u && \"nextSibling\";\n                }\n                return !0;\n              }\n              if (u = [m ? c.firstChild : c.lastChild], m && p) {\n                d = (s = (r = (i = (o = (a = c)[k] || (a[k] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === S && r[1]) && r[2], a = s && c.childNodes[s];\n                while (a = ++s && a && a[l] || (d = s = 0) || u.pop()) if (1 === a.nodeType && ++d && a === e) {\n                  i[h] = [S, s, d];\n                  break;\n                }\n              } else if (p && (d = s = (r = (i = (o = (a = e)[k] || (a[k] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === S && r[1]), !1 === d) while (a = ++s && a && a[l] || (d = s = 0) || u.pop()) if ((x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) && ++d && (p && ((i = (o = a[k] || (a[k] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] = [S, d]), a === e)) break;\n              return (d -= v) === g || d % g == 0 && 0 <= d / g;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(e, o) {\n          var t,\n            a = b.pseudos[e] || b.setFilters[e.toLowerCase()] || se.error(\"unsupported pseudo: \" + e);\n          return a[k] ? a(o) : 1 < a.length ? (t = [e, e, \"\", o], b.setFilters.hasOwnProperty(e.toLowerCase()) ? le(function (e, t) {\n            var n,\n              r = a(e, o),\n              i = r.length;\n            while (i--) e[n = P(e, r[i])] = !(t[n] = r[i]);\n          }) : function (e) {\n            return a(e, 0, t);\n          }) : a;\n        }\n      },\n      pseudos: {\n        not: le(function (e) {\n          var r = [],\n            i = [],\n            s = f(e.replace(B, \"$1\"));\n          return s[k] ? le(function (e, t, n, r) {\n            var i,\n              o = s(e, null, r, []),\n              a = e.length;\n            while (a--) (i = o[a]) && (e[a] = !(t[a] = i));\n          }) : function (e, t, n) {\n            return r[0] = e, s(r, null, n, i), r[0] = null, !i.pop();\n          };\n        }),\n        has: le(function (t) {\n          return function (e) {\n            return 0 < se(t, e).length;\n          };\n        }),\n        contains: le(function (t) {\n          return t = t.replace(te, ne), function (e) {\n            return -1 < (e.textContent || o(e)).indexOf(t);\n          };\n        }),\n        lang: le(function (n) {\n          return V.test(n || \"\") || se.error(\"unsupported lang: \" + n), n = n.replace(te, ne).toLowerCase(), function (e) {\n            var t;\n            do {\n              if (t = E ? e.lang : e.getAttribute(\"xml:lang\") || e.getAttribute(\"lang\")) return (t = t.toLowerCase()) === n || 0 === t.indexOf(n + \"-\");\n            } while ((e = e.parentNode) && 1 === e.nodeType);\n            return !1;\n          };\n        }),\n        target: function target(e) {\n          var t = n.location && n.location.hash;\n          return t && t.slice(1) === e.id;\n        },\n        root: function root(e) {\n          return e === a;\n        },\n        focus: function focus(e) {\n          return e === C.activeElement && (!C.hasFocus || C.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);\n        },\n        enabled: ge(!1),\n        disabled: ge(!0),\n        checked: function checked(e) {\n          var t = e.nodeName.toLowerCase();\n          return \"input\" === t && !!e.checked || \"option\" === t && !!e.selected;\n        },\n        selected: function selected(e) {\n          return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;\n        },\n        empty: function empty(e) {\n          for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeType < 6) return !1;\n          return !0;\n        },\n        parent: function parent(e) {\n          return !b.pseudos.empty(e);\n        },\n        header: function header(e) {\n          return J.test(e.nodeName);\n        },\n        input: function input(e) {\n          return Q.test(e.nodeName);\n        },\n        button: function button(e) {\n          var t = e.nodeName.toLowerCase();\n          return \"input\" === t && \"button\" === e.type || \"button\" === t;\n        },\n        text: function text(e) {\n          var t;\n          return \"input\" === e.nodeName.toLowerCase() && \"text\" === e.type && (null == (t = e.getAttribute(\"type\")) || \"text\" === t.toLowerCase());\n        },\n        first: ve(function () {\n          return [0];\n        }),\n        last: ve(function (e, t) {\n          return [t - 1];\n        }),\n        eq: ve(function (e, t, n) {\n          return [n < 0 ? n + t : n];\n        }),\n        even: ve(function (e, t) {\n          for (var n = 0; n < t; n += 2) e.push(n);\n          return e;\n        }),\n        odd: ve(function (e, t) {\n          for (var n = 1; n < t; n += 2) e.push(n);\n          return e;\n        }),\n        lt: ve(function (e, t, n) {\n          for (var r = n < 0 ? n + t : t < n ? t : n; 0 <= --r;) e.push(r);\n          return e;\n        }),\n        gt: ve(function (e, t, n) {\n          for (var r = n < 0 ? n + t : n; ++r < t;) e.push(r);\n          return e;\n        })\n      }\n    }).pseudos.nth = b.pseudos.eq, {\n      radio: !0,\n      checkbox: !0,\n      file: !0,\n      password: !0,\n      image: !0\n    }) b.pseudos[e] = de(e);\n    for (e in {\n      submit: !0,\n      reset: !0\n    }) b.pseudos[e] = he(e);\n    function me() {}\n    function xe(e) {\n      for (var t = 0, n = e.length, r = \"\"; t < n; t++) r += e[t].value;\n      return r;\n    }\n    function be(s, e, t) {\n      var u = e.dir,\n        l = e.next,\n        c = l || u,\n        f = t && \"parentNode\" === c,\n        p = r++;\n      return e.first ? function (e, t, n) {\n        while (e = e[u]) if (1 === e.nodeType || f) return s(e, t, n);\n        return !1;\n      } : function (e, t, n) {\n        var r,\n          i,\n          o,\n          a = [S, p];\n        if (n) {\n          while (e = e[u]) if ((1 === e.nodeType || f) && s(e, t, n)) return !0;\n        } else while (e = e[u]) if (1 === e.nodeType || f) if (i = (o = e[k] || (e[k] = {}))[e.uniqueID] || (o[e.uniqueID] = {}), l && l === e.nodeName.toLowerCase()) e = e[u] || e;else {\n          if ((r = i[c]) && r[0] === S && r[1] === p) return a[2] = r[2];\n          if ((i[c] = a)[2] = s(e, t, n)) return !0;\n        }\n        return !1;\n      };\n    }\n    function we(i) {\n      return 1 < i.length ? function (e, t, n) {\n        var r = i.length;\n        while (r--) if (!i[r](e, t, n)) return !1;\n        return !0;\n      } : i[0];\n    }\n    function Te(e, t, n, r, i) {\n      for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++) (o = e[s]) && (n && !n(o, r, i) || (a.push(o), l && t.push(s)));\n      return a;\n    }\n    function Ce(d, h, g, v, y, e) {\n      return v && !v[k] && (v = Ce(v)), y && !y[k] && (y = Ce(y, e)), le(function (e, t, n, r) {\n        var i,\n          o,\n          a,\n          s = [],\n          u = [],\n          l = t.length,\n          c = e || function (e, t, n) {\n            for (var r = 0, i = t.length; r < i; r++) se(e, t[r], n);\n            return n;\n          }(h || \"*\", n.nodeType ? [n] : n, []),\n          f = !d || !e && h ? c : Te(c, s, d, n, r),\n          p = g ? y || (e ? d : l || v) ? [] : t : f;\n        if (g && g(f, p, n, r), v) {\n          i = Te(p, u), v(i, [], n, r), o = i.length;\n          while (o--) (a = i[o]) && (p[u[o]] = !(f[u[o]] = a));\n        }\n        if (e) {\n          if (y || d) {\n            if (y) {\n              i = [], o = p.length;\n              while (o--) (a = p[o]) && i.push(f[o] = a);\n              y(null, p = [], i, r);\n            }\n            o = p.length;\n            while (o--) (a = p[o]) && -1 < (i = y ? P(e, a) : s[o]) && (e[i] = !(t[i] = a));\n          }\n        } else p = Te(p === t ? p.splice(l, p.length) : p), y ? y(null, t, p, r) : H.apply(t, p);\n      });\n    }\n    function Ee(e) {\n      for (var i, t, n, r = e.length, o = b.relative[e[0].type], a = o || b.relative[\" \"], s = o ? 1 : 0, u = be(function (e) {\n          return e === i;\n        }, a, !0), l = be(function (e) {\n          return -1 < P(i, e);\n        }, a, !0), c = [function (e, t, n) {\n          var r = !o && (n || t !== w) || ((i = t).nodeType ? u(e, t, n) : l(e, t, n));\n          return i = null, r;\n        }]; s < r; s++) if (t = b.relative[e[s].type]) c = [be(we(c), t)];else {\n        if ((t = b.filter[e[s].type].apply(null, e[s].matches))[k]) {\n          for (n = ++s; n < r; n++) if (b.relative[e[n].type]) break;\n          return Ce(1 < s && we(c), 1 < s && xe(e.slice(0, s - 1).concat({\n            value: \" \" === e[s - 2].type ? \"*\" : \"\"\n          })).replace(B, \"$1\"), t, s < n && Ee(e.slice(s, n)), n < r && Ee(e = e.slice(n)), n < r && xe(e));\n        }\n        c.push(t);\n      }\n      return we(c);\n    }\n    return me.prototype = b.filters = b.pseudos, b.setFilters = new me(), h = se.tokenize = function (e, t) {\n      var n,\n        r,\n        i,\n        o,\n        a,\n        s,\n        u,\n        l = x[e + \" \"];\n      if (l) return t ? 0 : l.slice(0);\n      a = e, s = [], u = b.preFilter;\n      while (a) {\n        for (o in n && !(r = _.exec(a)) || (r && (a = a.slice(r[0].length) || a), s.push(i = [])), n = !1, (r = z.exec(a)) && (n = r.shift(), i.push({\n          value: n,\n          type: r[0].replace(B, \" \")\n        }), a = a.slice(n.length)), b.filter) !(r = G[o].exec(a)) || u[o] && !(r = u[o](r)) || (n = r.shift(), i.push({\n          value: n,\n          type: o,\n          matches: r\n        }), a = a.slice(n.length));\n        if (!n) break;\n      }\n      return t ? a.length : a ? se.error(e) : x(e, s).slice(0);\n    }, f = se.compile = function (e, t) {\n      var n,\n        v,\n        y,\n        m,\n        x,\n        r,\n        i = [],\n        o = [],\n        a = N[e + \" \"];\n      if (!a) {\n        t || (t = h(e)), n = t.length;\n        while (n--) (a = Ee(t[n]))[k] ? i.push(a) : o.push(a);\n        (a = N(e, (v = o, m = 0 < (y = i).length, x = 0 < v.length, r = function r(e, t, n, _r, i) {\n          var o,\n            a,\n            s,\n            u = 0,\n            l = \"0\",\n            c = e && [],\n            f = [],\n            p = w,\n            d = e || x && b.find.TAG(\"*\", i),\n            h = S += null == p ? 1 : Math.random() || .1,\n            g = d.length;\n          for (i && (w = t === C || t || i); l !== g && null != (o = d[l]); l++) {\n            if (x && o) {\n              a = 0, t || o.ownerDocument === C || (T(o), n = !E);\n              while (s = v[a++]) if (s(o, t || C, n)) {\n                _r.push(o);\n                break;\n              }\n              i && (S = h);\n            }\n            m && ((o = !s && o) && u--, e && c.push(o));\n          }\n          if (u += l, m && l !== u) {\n            a = 0;\n            while (s = y[a++]) s(c, f, t, n);\n            if (e) {\n              if (0 < u) while (l--) c[l] || f[l] || (f[l] = q.call(_r));\n              f = Te(f);\n            }\n            H.apply(_r, f), i && !e && 0 < f.length && 1 < u + y.length && se.uniqueSort(_r);\n          }\n          return i && (S = h, w = p), c;\n        }, m ? le(r) : r))).selector = e;\n      }\n      return a;\n    }, g = se.select = function (e, t, n, r) {\n      var i,\n        o,\n        a,\n        s,\n        u,\n        l = \"function\" == typeof e && e,\n        c = !r && h(e = l.selector || e);\n      if (n = n || [], 1 === c.length) {\n        if (2 < (o = c[0] = c[0].slice(0)).length && \"ID\" === (a = o[0]).type && 9 === t.nodeType && E && b.relative[o[1].type]) {\n          if (!(t = (b.find.ID(a.matches[0].replace(te, ne), t) || [])[0])) return n;\n          l && (t = t.parentNode), e = e.slice(o.shift().value.length);\n        }\n        i = G.needsContext.test(e) ? 0 : o.length;\n        while (i--) {\n          if (a = o[i], b.relative[s = a.type]) break;\n          if ((u = b.find[s]) && (r = u(a.matches[0].replace(te, ne), ee.test(o[0].type) && ye(t.parentNode) || t))) {\n            if (o.splice(i, 1), !(e = r.length && xe(o))) return H.apply(n, r), n;\n            break;\n          }\n        }\n      }\n      return (l || f(e, c))(r, t, !E, n, !t || ee.test(e) && ye(t.parentNode) || t), n;\n    }, d.sortStable = k.split(\"\").sort(D).join(\"\") === k, d.detectDuplicates = !!l, T(), d.sortDetached = ce(function (e) {\n      return 1 & e.compareDocumentPosition(C.createElement(\"fieldset\"));\n    }), ce(function (e) {\n      return e.innerHTML = \"<a href='#'></a>\", \"#\" === e.firstChild.getAttribute(\"href\");\n    }) || fe(\"type|href|height|width\", function (e, t, n) {\n      if (!n) return e.getAttribute(t, \"type\" === t.toLowerCase() ? 1 : 2);\n    }), d.attributes && ce(function (e) {\n      return e.innerHTML = \"<input/>\", e.firstChild.setAttribute(\"value\", \"\"), \"\" === e.firstChild.getAttribute(\"value\");\n    }) || fe(\"value\", function (e, t, n) {\n      if (!n && \"input\" === e.nodeName.toLowerCase()) return e.defaultValue;\n    }), ce(function (e) {\n      return null == e.getAttribute(\"disabled\");\n    }) || fe(R, function (e, t, n) {\n      var r;\n      if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;\n    }), se;\n  }(C);\n  k.find = h, k.expr = h.selectors, k.expr[\":\"] = k.expr.pseudos, k.uniqueSort = k.unique = h.uniqueSort, k.text = h.getText, k.isXMLDoc = h.isXML, k.contains = h.contains, k.escapeSelector = h.escape;\n  var T = function T(e, t, n) {\n      var r = [],\n        i = void 0 !== n;\n      while ((e = e[t]) && 9 !== e.nodeType) if (1 === e.nodeType) {\n        if (i && k(e).is(n)) break;\n        r.push(e);\n      }\n      return r;\n    },\n    S = function S(e, t) {\n      for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);\n      return n;\n    },\n    N = k.expr.match.needsContext;\n  function A(e, t) {\n    return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();\n  }\n  var D = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n  function j(e, n, r) {\n    return m(n) ? k.grep(e, function (e, t) {\n      return !!n.call(e, t, e) !== r;\n    }) : n.nodeType ? k.grep(e, function (e) {\n      return e === n !== r;\n    }) : \"string\" != typeof n ? k.grep(e, function (e) {\n      return -1 < i.call(n, e) !== r;\n    }) : k.filter(n, e, r);\n  }\n  k.filter = function (e, t, n) {\n    var r = t[0];\n    return n && (e = \":not(\" + e + \")\"), 1 === t.length && 1 === r.nodeType ? k.find.matchesSelector(r, e) ? [r] : [] : k.find.matches(e, k.grep(t, function (e) {\n      return 1 === e.nodeType;\n    }));\n  }, k.fn.extend({\n    find: function find(e) {\n      var t,\n        n,\n        r = this.length,\n        i = this;\n      if (\"string\" != typeof e) return this.pushStack(k(e).filter(function () {\n        for (t = 0; t < r; t++) if (k.contains(i[t], this)) return !0;\n      }));\n      for (n = this.pushStack([]), t = 0; t < r; t++) k.find(e, i[t], n);\n      return 1 < r ? k.uniqueSort(n) : n;\n    },\n    filter: function filter(e) {\n      return this.pushStack(j(this, e || [], !1));\n    },\n    not: function not(e) {\n      return this.pushStack(j(this, e || [], !0));\n    },\n    is: function is(e) {\n      return !!j(this, \"string\" == typeof e && N.test(e) ? k(e) : e || [], !1).length;\n    }\n  });\n  var q,\n    L = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;\n  (k.fn.init = function (e, t, n) {\n    var r, i;\n    if (!e) return this;\n    if (n = n || q, \"string\" == typeof e) {\n      if (!(r = \"<\" === e[0] && \">\" === e[e.length - 1] && 3 <= e.length ? [null, e, null] : L.exec(e)) || !r[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);\n      if (r[1]) {\n        if (t = t instanceof k ? t[0] : t, k.merge(this, k.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : E, !0)), D.test(r[1]) && k.isPlainObject(t)) for (r in t) m(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);\n        return this;\n      }\n      return (i = E.getElementById(r[2])) && (this[0] = i, this.length = 1), this;\n    }\n    return e.nodeType ? (this[0] = e, this.length = 1, this) : m(e) ? void 0 !== n.ready ? n.ready(e) : e(k) : k.makeArray(e, this);\n  }).prototype = k.fn, q = k(E);\n  var H = /^(?:parents|prev(?:Until|All))/,\n    O = {\n      children: !0,\n      contents: !0,\n      next: !0,\n      prev: !0\n    };\n  function P(e, t) {\n    while ((e = e[t]) && 1 !== e.nodeType);\n    return e;\n  }\n  k.fn.extend({\n    has: function has(e) {\n      var t = k(e, this),\n        n = t.length;\n      return this.filter(function () {\n        for (var e = 0; e < n; e++) if (k.contains(this, t[e])) return !0;\n      });\n    },\n    closest: function closest(e, t) {\n      var n,\n        r = 0,\n        i = this.length,\n        o = [],\n        a = \"string\" != typeof e && k(e);\n      if (!N.test(e)) for (; r < i; r++) for (n = this[r]; n && n !== t; n = n.parentNode) if (n.nodeType < 11 && (a ? -1 < a.index(n) : 1 === n.nodeType && k.find.matchesSelector(n, e))) {\n        o.push(n);\n        break;\n      }\n      return this.pushStack(1 < o.length ? k.uniqueSort(o) : o);\n    },\n    index: function index(e) {\n      return e ? \"string\" == typeof e ? i.call(k(e), this[0]) : i.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n    },\n    add: function add(e, t) {\n      return this.pushStack(k.uniqueSort(k.merge(this.get(), k(e, t))));\n    },\n    addBack: function addBack(e) {\n      return this.add(null == e ? this.prevObject : this.prevObject.filter(e));\n    }\n  }), k.each({\n    parent: function parent(e) {\n      var t = e.parentNode;\n      return t && 11 !== t.nodeType ? t : null;\n    },\n    parents: function parents(e) {\n      return T(e, \"parentNode\");\n    },\n    parentsUntil: function parentsUntil(e, t, n) {\n      return T(e, \"parentNode\", n);\n    },\n    next: function next(e) {\n      return P(e, \"nextSibling\");\n    },\n    prev: function prev(e) {\n      return P(e, \"previousSibling\");\n    },\n    nextAll: function nextAll(e) {\n      return T(e, \"nextSibling\");\n    },\n    prevAll: function prevAll(e) {\n      return T(e, \"previousSibling\");\n    },\n    nextUntil: function nextUntil(e, t, n) {\n      return T(e, \"nextSibling\", n);\n    },\n    prevUntil: function prevUntil(e, t, n) {\n      return T(e, \"previousSibling\", n);\n    },\n    siblings: function siblings(e) {\n      return S((e.parentNode || {}).firstChild, e);\n    },\n    children: function children(e) {\n      return S(e.firstChild);\n    },\n    contents: function contents(e) {\n      return \"undefined\" != typeof e.contentDocument ? e.contentDocument : (A(e, \"template\") && (e = e.content || e), k.merge([], e.childNodes));\n    }\n  }, function (r, i) {\n    k.fn[r] = function (e, t) {\n      var n = k.map(this, i, e);\n      return \"Until\" !== r.slice(-5) && (t = e), t && \"string\" == typeof t && (n = k.filter(t, n)), 1 < this.length && (O[r] || k.uniqueSort(n), H.test(r) && n.reverse()), this.pushStack(n);\n    };\n  });\n  var R = /[^\\x20\\t\\r\\n\\f]+/g;\n  function M(e) {\n    return e;\n  }\n  function I(e) {\n    throw e;\n  }\n  function W(e, t, n, r) {\n    var i;\n    try {\n      e && m(i = e.promise) ? i.call(e).done(t).fail(n) : e && m(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r));\n    } catch (e) {\n      n.apply(void 0, [e]);\n    }\n  }\n  k.Callbacks = function (r) {\n    var e, n;\n    r = \"string\" == typeof r ? (e = r, n = {}, k.each(e.match(R) || [], function (e, t) {\n      n[t] = !0;\n    }), n) : k.extend({}, r);\n    var i,\n      t,\n      o,\n      a,\n      s = [],\n      u = [],\n      l = -1,\n      c = function c() {\n        for (a = a || r.once, o = i = !0; u.length; l = -1) {\n          t = u.shift();\n          while (++l < s.length) !1 === s[l].apply(t[0], t[1]) && r.stopOnFalse && (l = s.length, t = !1);\n        }\n        r.memory || (t = !1), i = !1, a && (s = t ? [] : \"\");\n      },\n      f = {\n        add: function add() {\n          return s && (t && !i && (l = s.length - 1, u.push(t)), function n(e) {\n            k.each(e, function (e, t) {\n              m(t) ? r.unique && f.has(t) || s.push(t) : t && t.length && \"string\" !== w(t) && n(t);\n            });\n          }(arguments), t && !i && c()), this;\n        },\n        remove: function remove() {\n          return k.each(arguments, function (e, t) {\n            var n;\n            while (-1 < (n = k.inArray(t, s, n))) s.splice(n, 1), n <= l && l--;\n          }), this;\n        },\n        has: function has(e) {\n          return e ? -1 < k.inArray(e, s) : 0 < s.length;\n        },\n        empty: function empty() {\n          return s && (s = []), this;\n        },\n        disable: function disable() {\n          return a = u = [], s = t = \"\", this;\n        },\n        disabled: function disabled() {\n          return !s;\n        },\n        lock: function lock() {\n          return a = u = [], t || i || (s = t = \"\"), this;\n        },\n        locked: function locked() {\n          return !!a;\n        },\n        fireWith: function fireWith(e, t) {\n          return a || (t = [e, (t = t || []).slice ? t.slice() : t], u.push(t), i || c()), this;\n        },\n        fire: function fire() {\n          return f.fireWith(this, arguments), this;\n        },\n        fired: function fired() {\n          return !!o;\n        }\n      };\n    return f;\n  }, k.extend({\n    Deferred: function Deferred(e) {\n      var o = [[\"notify\", \"progress\", k.Callbacks(\"memory\"), k.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", k.Callbacks(\"once memory\"), k.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", k.Callbacks(\"once memory\"), k.Callbacks(\"once memory\"), 1, \"rejected\"]],\n        i = \"pending\",\n        a = {\n          state: function state() {\n            return i;\n          },\n          always: function always() {\n            return s.done(arguments).fail(arguments), this;\n          },\n          \"catch\": function _catch(e) {\n            return a.then(null, e);\n          },\n          pipe: function pipe() {\n            var i = arguments;\n            return k.Deferred(function (r) {\n              k.each(o, function (e, t) {\n                var n = m(i[t[4]]) && i[t[4]];\n                s[t[1]](function () {\n                  var e = n && n.apply(this, arguments);\n                  e && m(e.promise) ? e.promise().progress(r.notify).done(r.resolve).fail(r.reject) : r[t[0] + \"With\"](this, n ? [e] : arguments);\n                });\n              }), i = null;\n            }).promise();\n          },\n          then: function then(t, n, r) {\n            var u = 0;\n            function l(i, o, a, s) {\n              return function () {\n                var n = this,\n                  r = arguments,\n                  e = function e() {\n                    var e, t;\n                    if (!(i < u)) {\n                      if ((e = a.apply(n, r)) === o.promise()) throw new TypeError(\"Thenable self-resolution\");\n                      t = e && (\"object\" == _typeof(e) || \"function\" == typeof e) && e.then, m(t) ? s ? t.call(e, l(u, o, M, s), l(u, o, I, s)) : (u++, t.call(e, l(u, o, M, s), l(u, o, I, s), l(u, o, M, o.notifyWith))) : (a !== M && (n = void 0, r = [e]), (s || o.resolveWith)(n, r));\n                    }\n                  },\n                  t = s ? e : function () {\n                    try {\n                      e();\n                    } catch (e) {\n                      k.Deferred.exceptionHook && k.Deferred.exceptionHook(e, t.stackTrace), u <= i + 1 && (a !== I && (n = void 0, r = [e]), o.rejectWith(n, r));\n                    }\n                  };\n                i ? t() : (k.Deferred.getStackHook && (t.stackTrace = k.Deferred.getStackHook()), C.setTimeout(t));\n              };\n            }\n            return k.Deferred(function (e) {\n              o[0][3].add(l(0, e, m(r) ? r : M, e.notifyWith)), o[1][3].add(l(0, e, m(t) ? t : M)), o[2][3].add(l(0, e, m(n) ? n : I));\n            }).promise();\n          },\n          promise: function promise(e) {\n            return null != e ? k.extend(e, a) : a;\n          }\n        },\n        s = {};\n      return k.each(o, function (e, t) {\n        var n = t[2],\n          r = t[5];\n        a[t[1]] = n.add, r && n.add(function () {\n          i = r;\n        }, o[3 - e][2].disable, o[3 - e][3].disable, o[0][2].lock, o[0][3].lock), n.add(t[3].fire), s[t[0]] = function () {\n          return s[t[0] + \"With\"](this === s ? void 0 : this, arguments), this;\n        }, s[t[0] + \"With\"] = n.fireWith;\n      }), a.promise(s), e && e.call(s, s), s;\n    },\n    when: function when(e) {\n      var n = arguments.length,\n        t = n,\n        r = Array(t),\n        i = s.call(arguments),\n        o = k.Deferred(),\n        a = function a(t) {\n          return function (e) {\n            r[t] = this, i[t] = 1 < arguments.length ? s.call(arguments) : e, --n || o.resolveWith(r, i);\n          };\n        };\n      if (n <= 1 && (W(e, o.done(a(t)).resolve, o.reject, !n), \"pending\" === o.state() || m(i[t] && i[t].then))) return o.then();\n      while (t--) W(i[t], a(t), o.reject);\n      return o.promise();\n    }\n  });\n  var $ = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n  k.Deferred.exceptionHook = function (e, t) {\n    C.console && C.console.warn && e && $.test(e.name) && C.console.warn(\"jQuery.Deferred exception: \" + e.message, e.stack, t);\n  }, k.readyException = function (e) {\n    C.setTimeout(function () {\n      throw e;\n    });\n  };\n  var F = k.Deferred();\n  function B() {\n    E.removeEventListener(\"DOMContentLoaded\", B), C.removeEventListener(\"load\", B), k.ready();\n  }\n  k.fn.ready = function (e) {\n    return F.then(e)[\"catch\"](function (e) {\n      k.readyException(e);\n    }), this;\n  }, k.extend({\n    isReady: !1,\n    readyWait: 1,\n    ready: function ready(e) {\n      (!0 === e ? --k.readyWait : k.isReady) || (k.isReady = !0) !== e && 0 < --k.readyWait || F.resolveWith(E, [k]);\n    }\n  }), k.ready.then = F.then, \"complete\" === E.readyState || \"loading\" !== E.readyState && !E.documentElement.doScroll ? C.setTimeout(k.ready) : (E.addEventListener(\"DOMContentLoaded\", B), C.addEventListener(\"load\", B));\n  var _ = function _(e, t, n, r, i, o, a) {\n      var s = 0,\n        u = e.length,\n        l = null == n;\n      if (\"object\" === w(n)) for (s in i = !0, n) _(e, t, s, n[s], !0, o, a);else if (void 0 !== r && (i = !0, m(r) || (a = !0), l && (a ? (t.call(e, r), t = null) : (l = t, t = function t(e, _t2, n) {\n        return l.call(k(e), n);\n      })), t)) for (; s < u; s++) t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));\n      return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;\n    },\n    z = /^-ms-/,\n    U = /-([a-z])/g;\n  function X(e, t) {\n    return t.toUpperCase();\n  }\n  function V(e) {\n    return e.replace(z, \"ms-\").replace(U, X);\n  }\n  var G = function G(e) {\n    return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;\n  };\n  function Y() {\n    this.expando = k.expando + Y.uid++;\n  }\n  Y.uid = 1, Y.prototype = {\n    cache: function cache(e) {\n      var t = e[this.expando];\n      return t || (t = {}, G(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {\n        value: t,\n        configurable: !0\n      }))), t;\n    },\n    set: function set(e, t, n) {\n      var r,\n        i = this.cache(e);\n      if (\"string\" == typeof t) i[V(t)] = n;else for (r in t) i[V(r)] = t[r];\n      return i;\n    },\n    get: function get(e, t) {\n      return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][V(t)];\n    },\n    access: function access(e, t, n) {\n      return void 0 === t || t && \"string\" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t);\n    },\n    remove: function remove(e, t) {\n      var n,\n        r = e[this.expando];\n      if (void 0 !== r) {\n        if (void 0 !== t) {\n          n = (t = Array.isArray(t) ? t.map(V) : (t = V(t)) in r ? [t] : t.match(R) || []).length;\n          while (n--) delete r[t[n]];\n        }\n        (void 0 === t || k.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);\n      }\n    },\n    hasData: function hasData(e) {\n      var t = e[this.expando];\n      return void 0 !== t && !k.isEmptyObject(t);\n    }\n  };\n  var Q = new Y(),\n    J = new Y(),\n    K = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n    Z = /[A-Z]/g;\n  function ee(e, t, n) {\n    var r, i;\n    if (void 0 === n && 1 === e.nodeType) if (r = \"data-\" + t.replace(Z, \"-$&\").toLowerCase(), \"string\" == typeof (n = e.getAttribute(r))) {\n      try {\n        n = \"true\" === (i = n) || \"false\" !== i && (\"null\" === i ? null : i === +i + \"\" ? +i : K.test(i) ? JSON.parse(i) : i);\n      } catch (e) {}\n      J.set(e, t, n);\n    } else n = void 0;\n    return n;\n  }\n  k.extend({\n    hasData: function hasData(e) {\n      return J.hasData(e) || Q.hasData(e);\n    },\n    data: function data(e, t, n) {\n      return J.access(e, t, n);\n    },\n    removeData: function removeData(e, t) {\n      J.remove(e, t);\n    },\n    _data: function _data(e, t, n) {\n      return Q.access(e, t, n);\n    },\n    _removeData: function _removeData(e, t) {\n      Q.remove(e, t);\n    }\n  }), k.fn.extend({\n    data: function data(n, e) {\n      var t,\n        r,\n        i,\n        o = this[0],\n        a = o && o.attributes;\n      if (void 0 === n) {\n        if (this.length && (i = J.get(o), 1 === o.nodeType && !Q.get(o, \"hasDataAttrs\"))) {\n          t = a.length;\n          while (t--) a[t] && 0 === (r = a[t].name).indexOf(\"data-\") && (r = V(r.slice(5)), ee(o, r, i[r]));\n          Q.set(o, \"hasDataAttrs\", !0);\n        }\n        return i;\n      }\n      return \"object\" == _typeof(n) ? this.each(function () {\n        J.set(this, n);\n      }) : _(this, function (e) {\n        var t;\n        if (o && void 0 === e) return void 0 !== (t = J.get(o, n)) ? t : void 0 !== (t = ee(o, n)) ? t : void 0;\n        this.each(function () {\n          J.set(this, n, e);\n        });\n      }, null, e, 1 < arguments.length, null, !0);\n    },\n    removeData: function removeData(e) {\n      return this.each(function () {\n        J.remove(this, e);\n      });\n    }\n  }), k.extend({\n    queue: function queue(e, t, n) {\n      var r;\n      if (e) return t = (t || \"fx\") + \"queue\", r = Q.get(e, t), n && (!r || Array.isArray(n) ? r = Q.access(e, t, k.makeArray(n)) : r.push(n)), r || [];\n    },\n    dequeue: function dequeue(e, t) {\n      t = t || \"fx\";\n      var n = k.queue(e, t),\n        r = n.length,\n        i = n.shift(),\n        o = k._queueHooks(e, t);\n      \"inprogress\" === i && (i = n.shift(), r--), i && (\"fx\" === t && n.unshift(\"inprogress\"), delete o.stop, i.call(e, function () {\n        k.dequeue(e, t);\n      }, o)), !r && o && o.empty.fire();\n    },\n    _queueHooks: function _queueHooks(e, t) {\n      var n = t + \"queueHooks\";\n      return Q.get(e, n) || Q.access(e, n, {\n        empty: k.Callbacks(\"once memory\").add(function () {\n          Q.remove(e, [t + \"queue\", n]);\n        })\n      });\n    }\n  }), k.fn.extend({\n    queue: function queue(t, n) {\n      var e = 2;\n      return \"string\" != typeof t && (n = t, t = \"fx\", e--), arguments.length < e ? k.queue(this[0], t) : void 0 === n ? this : this.each(function () {\n        var e = k.queue(this, t, n);\n        k._queueHooks(this, t), \"fx\" === t && \"inprogress\" !== e[0] && k.dequeue(this, t);\n      });\n    },\n    dequeue: function dequeue(e) {\n      return this.each(function () {\n        k.dequeue(this, e);\n      });\n    },\n    clearQueue: function clearQueue(e) {\n      return this.queue(e || \"fx\", []);\n    },\n    promise: function promise(e, t) {\n      var n,\n        r = 1,\n        i = k.Deferred(),\n        o = this,\n        a = this.length,\n        s = function s() {\n          --r || i.resolveWith(o, [o]);\n        };\n      \"string\" != typeof e && (t = e, e = void 0), e = e || \"fx\";\n      while (a--) (n = Q.get(o[a], e + \"queueHooks\")) && n.empty && (r++, n.empty.add(s));\n      return s(), i.promise(t);\n    }\n  });\n  var te = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n    ne = new RegExp(\"^(?:([+-])=|)(\" + te + \")([a-z%]*)$\", \"i\"),\n    re = [\"Top\", \"Right\", \"Bottom\", \"Left\"],\n    ie = E.documentElement,\n    oe = function oe(e) {\n      return k.contains(e.ownerDocument, e);\n    },\n    ae = {\n      composed: !0\n    };\n  ie.getRootNode && (oe = function oe(e) {\n    return k.contains(e.ownerDocument, e) || e.getRootNode(ae) === e.ownerDocument;\n  });\n  var se = function se(e, t) {\n      return \"none\" === (e = t || e).style.display || \"\" === e.style.display && oe(e) && \"none\" === k.css(e, \"display\");\n    },\n    ue = function ue(e, t, n, r) {\n      var i,\n        o,\n        a = {};\n      for (o in t) a[o] = e.style[o], e.style[o] = t[o];\n      for (o in i = n.apply(e, r || []), t) e.style[o] = a[o];\n      return i;\n    };\n  function le(e, t, n, r) {\n    var i,\n      o,\n      a = 20,\n      s = r ? function () {\n        return r.cur();\n      } : function () {\n        return k.css(e, t, \"\");\n      },\n      u = s(),\n      l = n && n[3] || (k.cssNumber[t] ? \"\" : \"px\"),\n      c = e.nodeType && (k.cssNumber[t] || \"px\" !== l && +u) && ne.exec(k.css(e, t));\n    if (c && c[3] !== l) {\n      u /= 2, l = l || c[3], c = +u || 1;\n      while (a--) k.style(e, t, c + l), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), c /= o;\n      c *= 2, k.style(e, t, c + l), n = n || [];\n    }\n    return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, r.start = c, r.end = i)), i;\n  }\n  var ce = {};\n  function fe(e, t) {\n    for (var n, r, i, o, a, s, u, l = [], c = 0, f = e.length; c < f; c++) (r = e[c]).style && (n = r.style.display, t ? (\"none\" === n && (l[c] = Q.get(r, \"display\") || null, l[c] || (r.style.display = \"\")), \"\" === r.style.display && se(r) && (l[c] = (u = a = o = void 0, a = (i = r).ownerDocument, s = i.nodeName, (u = ce[s]) || (o = a.body.appendChild(a.createElement(s)), u = k.css(o, \"display\"), o.parentNode.removeChild(o), \"none\" === u && (u = \"block\"), ce[s] = u)))) : \"none\" !== n && (l[c] = \"none\", Q.set(r, \"display\", n)));\n    for (c = 0; c < f; c++) null != l[c] && (e[c].style.display = l[c]);\n    return e;\n  }\n  k.fn.extend({\n    show: function show() {\n      return fe(this, !0);\n    },\n    hide: function hide() {\n      return fe(this);\n    },\n    toggle: function toggle(e) {\n      return \"boolean\" == typeof e ? e ? this.show() : this.hide() : this.each(function () {\n        se(this) ? k(this).show() : k(this).hide();\n      });\n    }\n  });\n  var pe = /^(?:checkbox|radio)$/i,\n    de = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,\n    he = /^$|^module$|\\/(?:java|ecma)script/i,\n    ge = {\n      option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n      thead: [1, \"<table>\", \"</table>\"],\n      col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n      tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n      td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n      _default: [0, \"\", \"\"]\n    };\n  function ve(e, t) {\n    var n;\n    return n = \"undefined\" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || \"*\") : \"undefined\" != typeof e.querySelectorAll ? e.querySelectorAll(t || \"*\") : [], void 0 === t || t && A(e, t) ? k.merge([e], n) : n;\n  }\n  function ye(e, t) {\n    for (var n = 0, r = e.length; n < r; n++) Q.set(e[n], \"globalEval\", !t || Q.get(t[n], \"globalEval\"));\n  }\n  ge.optgroup = ge.option, ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td;\n  var me,\n    xe,\n    be = /<|&#?\\w+;/;\n  function we(e, t, n, r, i) {\n    for (var o, a, s, u, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) if ((o = e[d]) || 0 === o) if (\"object\" === w(o)) k.merge(p, o.nodeType ? [o] : o);else if (be.test(o)) {\n      a = a || f.appendChild(t.createElement(\"div\")), s = (de.exec(o) || [\"\", \"\"])[1].toLowerCase(), u = ge[s] || ge._default, a.innerHTML = u[1] + k.htmlPrefilter(o) + u[2], c = u[0];\n      while (c--) a = a.lastChild;\n      k.merge(p, a.childNodes), (a = f.firstChild).textContent = \"\";\n    } else p.push(t.createTextNode(o));\n    f.textContent = \"\", d = 0;\n    while (o = p[d++]) if (r && -1 < k.inArray(o, r)) i && i.push(o);else if (l = oe(o), a = ve(f.appendChild(o), \"script\"), l && ye(a), n) {\n      c = 0;\n      while (o = a[c++]) he.test(o.type || \"\") && n.push(o);\n    }\n    return f;\n  }\n  me = E.createDocumentFragment().appendChild(E.createElement(\"div\")), (xe = E.createElement(\"input\")).setAttribute(\"type\", \"radio\"), xe.setAttribute(\"checked\", \"checked\"), xe.setAttribute(\"name\", \"t\"), me.appendChild(xe), y.checkClone = me.cloneNode(!0).cloneNode(!0).lastChild.checked, me.innerHTML = \"<textarea>x</textarea>\", y.noCloneChecked = !!me.cloneNode(!0).lastChild.defaultValue;\n  var Te = /^key/,\n    Ce = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n    Ee = /^([^.]*)(?:\\.(.+)|)/;\n  function ke() {\n    return !0;\n  }\n  function Se() {\n    return !1;\n  }\n  function Ne(e, t) {\n    return e === function () {\n      try {\n        return E.activeElement;\n      } catch (e) {}\n    }() == (\"focus\" === t);\n  }\n  function Ae(e, t, n, r, i, o) {\n    var a, s;\n    if (\"object\" == _typeof(t)) {\n      for (s in \"string\" != typeof n && (r = r || n, n = void 0), t) Ae(e, s, n, r, t[s], o);\n      return e;\n    }\n    if (null == r && null == i ? (i = n, r = n = void 0) : null == i && (\"string\" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = Se;else if (!i) return e;\n    return 1 === o && (a = i, (i = function i(e) {\n      return k().off(e), a.apply(this, arguments);\n    }).guid = a.guid || (a.guid = k.guid++)), e.each(function () {\n      k.event.add(this, t, i, r, n);\n    });\n  }\n  function De(e, i, o) {\n    o ? (Q.set(e, i, !1), k.event.add(e, i, {\n      namespace: !1,\n      handler: function handler(e) {\n        var t,\n          n,\n          r = Q.get(this, i);\n        if (1 & e.isTrigger && this[i]) {\n          if (r.length) (k.event.special[i] || {}).delegateType && e.stopPropagation();else if (r = s.call(arguments), Q.set(this, i, r), t = o(this, i), this[i](), r !== (n = Q.get(this, i)) || t ? Q.set(this, i, !1) : n = {}, r !== n) return e.stopImmediatePropagation(), e.preventDefault(), n.value;\n        } else r.length && (Q.set(this, i, {\n          value: k.event.trigger(k.extend(r[0], k.Event.prototype), r.slice(1), this)\n        }), e.stopImmediatePropagation());\n      }\n    })) : void 0 === Q.get(e, i) && k.event.add(e, i, ke);\n  }\n  k.event = {\n    global: {},\n    add: function add(t, e, n, r, i) {\n      var o,\n        a,\n        s,\n        u,\n        l,\n        c,\n        f,\n        p,\n        d,\n        h,\n        g,\n        v = Q.get(t);\n      if (v) {\n        n.handler && (n = (o = n).handler, i = o.selector), i && k.find.matchesSelector(ie, i), n.guid || (n.guid = k.guid++), (u = v.events) || (u = v.events = {}), (a = v.handle) || (a = v.handle = function (e) {\n          return \"undefined\" != typeof k && k.event.triggered !== e.type ? k.event.dispatch.apply(t, arguments) : void 0;\n        }), l = (e = (e || \"\").match(R) || [\"\"]).length;\n        while (l--) d = g = (s = Ee.exec(e[l]) || [])[1], h = (s[2] || \"\").split(\".\").sort(), d && (f = k.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = k.event.special[d] || {}, c = k.extend({\n          type: d,\n          origType: g,\n          data: r,\n          handler: n,\n          guid: n.guid,\n          selector: i,\n          needsContext: i && k.expr.match.needsContext.test(i),\n          namespace: h.join(\".\")\n        }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(t, r, h, a) || t.addEventListener && t.addEventListener(d, a)), f.add && (f.add.call(t, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), k.event.global[d] = !0);\n      }\n    },\n    remove: function remove(e, t, n, r, i) {\n      var o,\n        a,\n        s,\n        u,\n        l,\n        c,\n        f,\n        p,\n        d,\n        h,\n        g,\n        v = Q.hasData(e) && Q.get(e);\n      if (v && (u = v.events)) {\n        l = (t = (t || \"\").match(R) || [\"\"]).length;\n        while (l--) if (d = g = (s = Ee.exec(t[l]) || [])[1], h = (s[2] || \"\").split(\".\").sort(), d) {\n          f = k.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp(\"(^|\\\\.)\" + h.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"), a = o = p.length;\n          while (o--) c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && (\"**\" !== r || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));\n          a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, v.handle) || k.removeEvent(e, d, v.handle), delete u[d]);\n        } else for (d in u) k.event.remove(e, d + t[l], n, r, !0);\n        k.isEmptyObject(u) && Q.remove(e, \"handle events\");\n      }\n    },\n    dispatch: function dispatch(e) {\n      var t,\n        n,\n        r,\n        i,\n        o,\n        a,\n        s = k.event.fix(e),\n        u = new Array(arguments.length),\n        l = (Q.get(this, \"events\") || {})[s.type] || [],\n        c = k.event.special[s.type] || {};\n      for (u[0] = s, t = 1; t < arguments.length; t++) u[t] = arguments[t];\n      if (s.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, s)) {\n        a = k.event.handlers.call(this, s, l), t = 0;\n        while ((i = a[t++]) && !s.isPropagationStopped()) {\n          s.currentTarget = i.elem, n = 0;\n          while ((o = i.handlers[n++]) && !s.isImmediatePropagationStopped()) s.rnamespace && !1 !== o.namespace && !s.rnamespace.test(o.namespace) || (s.handleObj = o, s.data = o.data, void 0 !== (r = ((k.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, u)) && !1 === (s.result = r) && (s.preventDefault(), s.stopPropagation()));\n        }\n        return c.postDispatch && c.postDispatch.call(this, s), s.result;\n      }\n    },\n    handlers: function handlers(e, t) {\n      var n,\n        r,\n        i,\n        o,\n        a,\n        s = [],\n        u = t.delegateCount,\n        l = e.target;\n      if (u && l.nodeType && !(\"click\" === e.type && 1 <= e.button)) for (; l !== this; l = l.parentNode || this) if (1 === l.nodeType && (\"click\" !== e.type || !0 !== l.disabled)) {\n        for (o = [], a = {}, n = 0; n < u; n++) void 0 === a[i = (r = t[n]).selector + \" \"] && (a[i] = r.needsContext ? -1 < k(i, this).index(l) : k.find(i, this, null, [l]).length), a[i] && o.push(r);\n        o.length && s.push({\n          elem: l,\n          handlers: o\n        });\n      }\n      return l = this, u < t.length && s.push({\n        elem: l,\n        handlers: t.slice(u)\n      }), s;\n    },\n    addProp: function addProp(t, e) {\n      Object.defineProperty(k.Event.prototype, t, {\n        enumerable: !0,\n        configurable: !0,\n        get: m(e) ? function () {\n          if (this.originalEvent) return e(this.originalEvent);\n        } : function () {\n          if (this.originalEvent) return this.originalEvent[t];\n        },\n        set: function set(e) {\n          Object.defineProperty(this, t, {\n            enumerable: !0,\n            configurable: !0,\n            writable: !0,\n            value: e\n          });\n        }\n      });\n    },\n    fix: function fix(e) {\n      return e[k.expando] ? e : new k.Event(e);\n    },\n    special: {\n      load: {\n        noBubble: !0\n      },\n      click: {\n        setup: function setup(e) {\n          var t = this || e;\n          return pe.test(t.type) && t.click && A(t, \"input\") && De(t, \"click\", ke), !1;\n        },\n        trigger: function trigger(e) {\n          var t = this || e;\n          return pe.test(t.type) && t.click && A(t, \"input\") && De(t, \"click\"), !0;\n        },\n        _default: function _default(e) {\n          var t = e.target;\n          return pe.test(t.type) && t.click && A(t, \"input\") && Q.get(t, \"click\") || A(t, \"a\");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(e) {\n          void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);\n        }\n      }\n    }\n  }, k.removeEvent = function (e, t, n) {\n    e.removeEventListener && e.removeEventListener(t, n);\n  }, k.Event = function (e, t) {\n    if (!(this instanceof k.Event)) return new k.Event(e, t);\n    e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? ke : Se, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && k.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[k.expando] = !0;\n  }, k.Event.prototype = {\n    constructor: k.Event,\n    isDefaultPrevented: Se,\n    isPropagationStopped: Se,\n    isImmediatePropagationStopped: Se,\n    isSimulated: !1,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = ke, e && !this.isSimulated && e.preventDefault();\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = ke, e && !this.isSimulated && e.stopPropagation();\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = ke, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();\n    }\n  }, k.each({\n    altKey: !0,\n    bubbles: !0,\n    cancelable: !0,\n    changedTouches: !0,\n    ctrlKey: !0,\n    detail: !0,\n    eventPhase: !0,\n    metaKey: !0,\n    pageX: !0,\n    pageY: !0,\n    shiftKey: !0,\n    view: !0,\n    \"char\": !0,\n    code: !0,\n    charCode: !0,\n    key: !0,\n    keyCode: !0,\n    button: !0,\n    buttons: !0,\n    clientX: !0,\n    clientY: !0,\n    offsetX: !0,\n    offsetY: !0,\n    pointerId: !0,\n    pointerType: !0,\n    screenX: !0,\n    screenY: !0,\n    targetTouches: !0,\n    toElement: !0,\n    touches: !0,\n    which: function which(e) {\n      var t = e.button;\n      return null == e.which && Te.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && Ce.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;\n    }\n  }, k.event.addProp), k.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (e, t) {\n    k.event.special[e] = {\n      setup: function setup() {\n        return De(this, e, Ne), !1;\n      },\n      trigger: function trigger() {\n        return De(this, e), !0;\n      },\n      delegateType: t\n    };\n  }), k.each({\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\",\n    pointerenter: \"pointerover\",\n    pointerleave: \"pointerout\"\n  }, function (e, i) {\n    k.event.special[e] = {\n      delegateType: i,\n      bindType: i,\n      handle: function handle(e) {\n        var t,\n          n = e.relatedTarget,\n          r = e.handleObj;\n        return n && (n === this || k.contains(this, n)) || (e.type = r.origType, t = r.handler.apply(this, arguments), e.type = i), t;\n      }\n    };\n  }), k.fn.extend({\n    on: function on(e, t, n, r) {\n      return Ae(this, e, t, n, r);\n    },\n    one: function one(e, t, n, r) {\n      return Ae(this, e, t, n, r, 1);\n    },\n    off: function off(e, t, n) {\n      var r, i;\n      if (e && e.preventDefault && e.handleObj) return r = e.handleObj, k(e.delegateTarget).off(r.namespace ? r.origType + \".\" + r.namespace : r.origType, r.selector, r.handler), this;\n      if (\"object\" == _typeof(e)) {\n        for (i in e) this.off(i, t, e[i]);\n        return this;\n      }\n      return !1 !== t && \"function\" != typeof t || (n = t, t = void 0), !1 === n && (n = Se), this.each(function () {\n        k.event.remove(this, e, n, t);\n      });\n    }\n  });\n  var je = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n    qe = /<script|<style|<link/i,\n    Le = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n    He = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n  function Oe(e, t) {\n    return A(e, \"table\") && A(11 !== t.nodeType ? t : t.firstChild, \"tr\") && k(e).children(\"tbody\")[0] || e;\n  }\n  function Pe(e) {\n    return e.type = (null !== e.getAttribute(\"type\")) + \"/\" + e.type, e;\n  }\n  function Re(e) {\n    return \"true/\" === (e.type || \"\").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute(\"type\"), e;\n  }\n  function Me(e, t) {\n    var n, r, i, o, a, s, u, l;\n    if (1 === t.nodeType) {\n      if (Q.hasData(e) && (o = Q.access(e), a = Q.set(t, o), l = o.events)) for (i in delete a.handle, a.events = {}, l) for (n = 0, r = l[i].length; n < r; n++) k.event.add(t, i, l[i][n]);\n      J.hasData(e) && (s = J.access(e), u = k.extend({}, s), J.set(t, u));\n    }\n  }\n  function Ie(n, r, i, o) {\n    r = g.apply([], r);\n    var e,\n      t,\n      a,\n      s,\n      u,\n      l,\n      c = 0,\n      f = n.length,\n      p = f - 1,\n      d = r[0],\n      h = m(d);\n    if (h || 1 < f && \"string\" == typeof d && !y.checkClone && Le.test(d)) return n.each(function (e) {\n      var t = n.eq(e);\n      h && (r[0] = d.call(this, e, t.html())), Ie(t, r, i, o);\n    });\n    if (f && (t = (e = we(r, n[0].ownerDocument, !1, n, o)).firstChild, 1 === e.childNodes.length && (e = t), t || o)) {\n      for (s = (a = k.map(ve(e, \"script\"), Pe)).length; c < f; c++) u = e, c !== p && (u = k.clone(u, !0, !0), s && k.merge(a, ve(u, \"script\"))), i.call(n[c], u, c);\n      if (s) for (l = a[a.length - 1].ownerDocument, k.map(a, Re), c = 0; c < s; c++) u = a[c], he.test(u.type || \"\") && !Q.access(u, \"globalEval\") && k.contains(l, u) && (u.src && \"module\" !== (u.type || \"\").toLowerCase() ? k._evalUrl && !u.noModule && k._evalUrl(u.src, {\n        nonce: u.nonce || u.getAttribute(\"nonce\")\n      }) : b(u.textContent.replace(He, \"\"), u, l));\n    }\n    return n;\n  }\n  function We(e, t, n) {\n    for (var r, i = t ? k.filter(t, e) : e, o = 0; null != (r = i[o]); o++) n || 1 !== r.nodeType || k.cleanData(ve(r)), r.parentNode && (n && oe(r) && ye(ve(r, \"script\")), r.parentNode.removeChild(r));\n    return e;\n  }\n  k.extend({\n    htmlPrefilter: function htmlPrefilter(e) {\n      return e.replace(je, \"<$1></$2>\");\n    },\n    clone: function clone(e, t, n) {\n      var r,\n        i,\n        o,\n        a,\n        s,\n        u,\n        l,\n        c = e.cloneNode(!0),\n        f = oe(e);\n      if (!(y.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || k.isXMLDoc(e))) for (a = ve(c), r = 0, i = (o = ve(e)).length; r < i; r++) s = o[r], u = a[r], void 0, \"input\" === (l = u.nodeName.toLowerCase()) && pe.test(s.type) ? u.checked = s.checked : \"input\" !== l && \"textarea\" !== l || (u.defaultValue = s.defaultValue);\n      if (t) if (n) for (o = o || ve(e), a = a || ve(c), r = 0, i = o.length; r < i; r++) Me(o[r], a[r]);else Me(e, c);\n      return 0 < (a = ve(c, \"script\")).length && ye(a, !f && ve(e, \"script\")), c;\n    },\n    cleanData: function cleanData(e) {\n      for (var t, n, r, i = k.event.special, o = 0; void 0 !== (n = e[o]); o++) if (G(n)) {\n        if (t = n[Q.expando]) {\n          if (t.events) for (r in t.events) i[r] ? k.event.remove(n, r) : k.removeEvent(n, r, t.handle);\n          n[Q.expando] = void 0;\n        }\n        n[J.expando] && (n[J.expando] = void 0);\n      }\n    }\n  }), k.fn.extend({\n    detach: function detach(e) {\n      return We(this, e, !0);\n    },\n    remove: function remove(e) {\n      return We(this, e);\n    },\n    text: function text(e) {\n      return _(this, function (e) {\n        return void 0 === e ? k.text(this) : this.empty().each(function () {\n          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);\n        });\n      }, null, e, arguments.length);\n    },\n    append: function append() {\n      return Ie(this, arguments, function (e) {\n        1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Oe(this, e).appendChild(e);\n      });\n    },\n    prepend: function prepend() {\n      return Ie(this, arguments, function (e) {\n        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {\n          var t = Oe(this, e);\n          t.insertBefore(e, t.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return Ie(this, arguments, function (e) {\n        this.parentNode && this.parentNode.insertBefore(e, this);\n      });\n    },\n    after: function after() {\n      return Ie(this, arguments, function (e) {\n        this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);\n      });\n    },\n    empty: function empty() {\n      for (var e, t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (k.cleanData(ve(e, !1)), e.textContent = \"\");\n      return this;\n    },\n    clone: function clone(e, t) {\n      return e = null != e && e, t = null == t ? e : t, this.map(function () {\n        return k.clone(this, e, t);\n      });\n    },\n    html: function html(e) {\n      return _(this, function (e) {\n        var t = this[0] || {},\n          n = 0,\n          r = this.length;\n        if (void 0 === e && 1 === t.nodeType) return t.innerHTML;\n        if (\"string\" == typeof e && !qe.test(e) && !ge[(de.exec(e) || [\"\", \"\"])[1].toLowerCase()]) {\n          e = k.htmlPrefilter(e);\n          try {\n            for (; n < r; n++) 1 === (t = this[n] || {}).nodeType && (k.cleanData(ve(t, !1)), t.innerHTML = e);\n            t = 0;\n          } catch (e) {}\n        }\n        t && this.empty().append(e);\n      }, null, e, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var n = [];\n      return Ie(this, arguments, function (e) {\n        var t = this.parentNode;\n        k.inArray(this, n) < 0 && (k.cleanData(ve(this)), t && t.replaceChild(e, this));\n      }, n);\n    }\n  }), k.each({\n    appendTo: \"append\",\n    prependTo: \"prepend\",\n    insertBefore: \"before\",\n    insertAfter: \"after\",\n    replaceAll: \"replaceWith\"\n  }, function (e, a) {\n    k.fn[e] = function (e) {\n      for (var t, n = [], r = k(e), i = r.length - 1, o = 0; o <= i; o++) t = o === i ? this : this.clone(!0), k(r[o])[a](t), u.apply(n, t.get());\n      return this.pushStack(n);\n    };\n  });\n  var $e = new RegExp(\"^(\" + te + \")(?!px)[a-z%]+$\", \"i\"),\n    Fe = function Fe(e) {\n      var t = e.ownerDocument.defaultView;\n      return t && t.opener || (t = C), t.getComputedStyle(e);\n    },\n    Be = new RegExp(re.join(\"|\"), \"i\");\n  function _e(e, t, n) {\n    var r,\n      i,\n      o,\n      a,\n      s = e.style;\n    return (n = n || Fe(e)) && (\"\" !== (a = n.getPropertyValue(t) || n[t]) || oe(e) || (a = k.style(e, t)), !y.pixelBoxStyles() && $e.test(a) && Be.test(t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + \"\" : a;\n  }\n  function ze(e, t) {\n    return {\n      get: function get() {\n        if (!e()) return (this.get = t).apply(this, arguments);\n        delete this.get;\n      }\n    };\n  }\n  !function () {\n    function e() {\n      if (u) {\n        s.style.cssText = \"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\", u.style.cssText = \"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\", ie.appendChild(s).appendChild(u);\n        var e = C.getComputedStyle(u);\n        n = \"1%\" !== e.top, a = 12 === t(e.marginLeft), u.style.right = \"60%\", o = 36 === t(e.right), r = 36 === t(e.width), u.style.position = \"absolute\", i = 12 === t(u.offsetWidth / 3), ie.removeChild(s), u = null;\n      }\n    }\n    function t(e) {\n      return Math.round(parseFloat(e));\n    }\n    var n,\n      r,\n      i,\n      o,\n      a,\n      s = E.createElement(\"div\"),\n      u = E.createElement(\"div\");\n    u.style && (u.style.backgroundClip = \"content-box\", u.cloneNode(!0).style.backgroundClip = \"\", y.clearCloneStyle = \"content-box\" === u.style.backgroundClip, k.extend(y, {\n      boxSizingReliable: function boxSizingReliable() {\n        return e(), r;\n      },\n      pixelBoxStyles: function pixelBoxStyles() {\n        return e(), o;\n      },\n      pixelPosition: function pixelPosition() {\n        return e(), n;\n      },\n      reliableMarginLeft: function reliableMarginLeft() {\n        return e(), a;\n      },\n      scrollboxSize: function scrollboxSize() {\n        return e(), i;\n      }\n    }));\n  }();\n  var Ue = [\"Webkit\", \"Moz\", \"ms\"],\n    Xe = E.createElement(\"div\").style,\n    Ve = {};\n  function Ge(e) {\n    var t = k.cssProps[e] || Ve[e];\n    return t || (e in Xe ? e : Ve[e] = function (e) {\n      var t = e[0].toUpperCase() + e.slice(1),\n        n = Ue.length;\n      while (n--) if ((e = Ue[n] + t) in Xe) return e;\n    }(e) || e);\n  }\n  var Ye = /^(none|table(?!-c[ea]).+)/,\n    Qe = /^--/,\n    Je = {\n      position: \"absolute\",\n      visibility: \"hidden\",\n      display: \"block\"\n    },\n    Ke = {\n      letterSpacing: \"0\",\n      fontWeight: \"400\"\n    };\n  function Ze(e, t, n) {\n    var r = ne.exec(t);\n    return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || \"px\") : t;\n  }\n  function et(e, t, n, r, i, o) {\n    var a = \"width\" === t ? 1 : 0,\n      s = 0,\n      u = 0;\n    if (n === (r ? \"border\" : \"content\")) return 0;\n    for (; a < 4; a += 2) \"margin\" === n && (u += k.css(e, n + re[a], !0, i)), r ? (\"content\" === n && (u -= k.css(e, \"padding\" + re[a], !0, i)), \"margin\" !== n && (u -= k.css(e, \"border\" + re[a] + \"Width\", !0, i))) : (u += k.css(e, \"padding\" + re[a], !0, i), \"padding\" !== n ? u += k.css(e, \"border\" + re[a] + \"Width\", !0, i) : s += k.css(e, \"border\" + re[a] + \"Width\", !0, i));\n    return !r && 0 <= o && (u += Math.max(0, Math.ceil(e[\"offset\" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5)) || 0), u;\n  }\n  function tt(e, t, n) {\n    var r = Fe(e),\n      i = (!y.boxSizingReliable() || n) && \"border-box\" === k.css(e, \"boxSizing\", !1, r),\n      o = i,\n      a = _e(e, t, r),\n      s = \"offset\" + t[0].toUpperCase() + t.slice(1);\n    if ($e.test(a)) {\n      if (!n) return a;\n      a = \"auto\";\n    }\n    return (!y.boxSizingReliable() && i || \"auto\" === a || !parseFloat(a) && \"inline\" === k.css(e, \"display\", !1, r)) && e.getClientRects().length && (i = \"border-box\" === k.css(e, \"boxSizing\", !1, r), (o = s in e) && (a = e[s])), (a = parseFloat(a) || 0) + et(e, t, n || (i ? \"border\" : \"content\"), o, r, a) + \"px\";\n  }\n  function nt(e, t, n, r, i) {\n    return new nt.prototype.init(e, t, n, r, i);\n  }\n  k.extend({\n    cssHooks: {\n      opacity: {\n        get: function get(e, t) {\n          if (t) {\n            var n = _e(e, \"opacity\");\n            return \"\" === n ? \"1\" : n;\n          }\n        }\n      }\n    },\n    cssNumber: {\n      animationIterationCount: !0,\n      columnCount: !0,\n      fillOpacity: !0,\n      flexGrow: !0,\n      flexShrink: !0,\n      fontWeight: !0,\n      gridArea: !0,\n      gridColumn: !0,\n      gridColumnEnd: !0,\n      gridColumnStart: !0,\n      gridRow: !0,\n      gridRowEnd: !0,\n      gridRowStart: !0,\n      lineHeight: !0,\n      opacity: !0,\n      order: !0,\n      orphans: !0,\n      widows: !0,\n      zIndex: !0,\n      zoom: !0\n    },\n    cssProps: {},\n    style: function style(e, t, n, r) {\n      if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {\n        var i,\n          o,\n          a,\n          s = V(t),\n          u = Qe.test(t),\n          l = e.style;\n        if (u || (t = Ge(s)), a = k.cssHooks[t] || k.cssHooks[s], void 0 === n) return a && \"get\" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];\n        \"string\" === (o = _typeof(n)) && (i = ne.exec(n)) && i[1] && (n = le(e, t, i), o = \"number\"), null != n && n == n && (\"number\" !== o || u || (n += i && i[3] || (k.cssNumber[s] ? \"\" : \"px\")), y.clearCloneStyle || \"\" !== n || 0 !== t.indexOf(\"background\") || (l[t] = \"inherit\"), a && \"set\" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));\n      }\n    },\n    css: function css(e, t, n, r) {\n      var i,\n        o,\n        a,\n        s = V(t);\n      return Qe.test(t) || (t = Ge(s)), (a = k.cssHooks[t] || k.cssHooks[s]) && \"get\" in a && (i = a.get(e, !0, n)), void 0 === i && (i = _e(e, t, r)), \"normal\" === i && t in Ke && (i = Ke[t]), \"\" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i;\n    }\n  }), k.each([\"height\", \"width\"], function (e, u) {\n    k.cssHooks[u] = {\n      get: function get(e, t, n) {\n        if (t) return !Ye.test(k.css(e, \"display\")) || e.getClientRects().length && e.getBoundingClientRect().width ? tt(e, u, n) : ue(e, Je, function () {\n          return tt(e, u, n);\n        });\n      },\n      set: function set(e, t, n) {\n        var r,\n          i = Fe(e),\n          o = !y.scrollboxSize() && \"absolute\" === i.position,\n          a = (o || n) && \"border-box\" === k.css(e, \"boxSizing\", !1, i),\n          s = n ? et(e, u, n, a, i) : 0;\n        return a && o && (s -= Math.ceil(e[\"offset\" + u[0].toUpperCase() + u.slice(1)] - parseFloat(i[u]) - et(e, u, \"border\", !1, i) - .5)), s && (r = ne.exec(t)) && \"px\" !== (r[3] || \"px\") && (e.style[u] = t, t = k.css(e, u)), Ze(0, t, s);\n      }\n    };\n  }), k.cssHooks.marginLeft = ze(y.reliableMarginLeft, function (e, t) {\n    if (t) return (parseFloat(_e(e, \"marginLeft\")) || e.getBoundingClientRect().left - ue(e, {\n      marginLeft: 0\n    }, function () {\n      return e.getBoundingClientRect().left;\n    })) + \"px\";\n  }), k.each({\n    margin: \"\",\n    padding: \"\",\n    border: \"Width\"\n  }, function (i, o) {\n    k.cssHooks[i + o] = {\n      expand: function expand(e) {\n        for (var t = 0, n = {}, r = \"string\" == typeof e ? e.split(\" \") : [e]; t < 4; t++) n[i + re[t] + o] = r[t] || r[t - 2] || r[0];\n        return n;\n      }\n    }, \"margin\" !== i && (k.cssHooks[i + o].set = Ze);\n  }), k.fn.extend({\n    css: function css(e, t) {\n      return _(this, function (e, t, n) {\n        var r,\n          i,\n          o = {},\n          a = 0;\n        if (Array.isArray(t)) {\n          for (r = Fe(e), i = t.length; a < i; a++) o[t[a]] = k.css(e, t[a], !1, r);\n          return o;\n        }\n        return void 0 !== n ? k.style(e, t, n) : k.css(e, t);\n      }, e, t, 1 < arguments.length);\n    }\n  }), ((k.Tween = nt).prototype = {\n    constructor: nt,\n    init: function init(e, t, n, r, i, o) {\n      this.elem = e, this.prop = n, this.easing = i || k.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (k.cssNumber[n] ? \"\" : \"px\");\n    },\n    cur: function cur() {\n      var e = nt.propHooks[this.prop];\n      return e && e.get ? e.get(this) : nt.propHooks._default.get(this);\n    },\n    run: function run(e) {\n      var t,\n        n = nt.propHooks[this.prop];\n      return this.options.duration ? this.pos = t = k.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : nt.propHooks._default.set(this), this;\n    }\n  }).init.prototype = nt.prototype, (nt.propHooks = {\n    _default: {\n      get: function get(e) {\n        var t;\n        return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = k.css(e.elem, e.prop, \"\")) && \"auto\" !== t ? t : 0;\n      },\n      set: function set(e) {\n        k.fx.step[e.prop] ? k.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !k.cssHooks[e.prop] && null == e.elem.style[Ge(e.prop)] ? e.elem[e.prop] = e.now : k.style(e.elem, e.prop, e.now + e.unit);\n      }\n    }\n  }).scrollTop = nt.propHooks.scrollLeft = {\n    set: function set(e) {\n      e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);\n    }\n  }, k.easing = {\n    linear: function linear(e) {\n      return e;\n    },\n    swing: function swing(e) {\n      return .5 - Math.cos(e * Math.PI) / 2;\n    },\n    _default: \"swing\"\n  }, k.fx = nt.prototype.init, k.fx.step = {};\n  var rt,\n    it,\n    ot,\n    at,\n    st = /^(?:toggle|show|hide)$/,\n    ut = /queueHooks$/;\n  function lt() {\n    it && (!1 === E.hidden && C.requestAnimationFrame ? C.requestAnimationFrame(lt) : C.setTimeout(lt, k.fx.interval), k.fx.tick());\n  }\n  function ct() {\n    return C.setTimeout(function () {\n      rt = void 0;\n    }), rt = Date.now();\n  }\n  function ft(e, t) {\n    var n,\n      r = 0,\n      i = {\n        height: e\n      };\n    for (t = t ? 1 : 0; r < 4; r += 2 - t) i[\"margin\" + (n = re[r])] = i[\"padding\" + n] = e;\n    return t && (i.opacity = i.width = e), i;\n  }\n  function pt(e, t, n) {\n    for (var r, i = (dt.tweeners[t] || []).concat(dt.tweeners[\"*\"]), o = 0, a = i.length; o < a; o++) if (r = i[o].call(n, t, e)) return r;\n  }\n  function dt(o, e, t) {\n    var n,\n      a,\n      r = 0,\n      i = dt.prefilters.length,\n      s = k.Deferred().always(function () {\n        delete u.elem;\n      }),\n      u = function u() {\n        if (a) return !1;\n        for (var e = rt || ct(), t = Math.max(0, l.startTime + l.duration - e), n = 1 - (t / l.duration || 0), r = 0, i = l.tweens.length; r < i; r++) l.tweens[r].run(n);\n        return s.notifyWith(o, [l, n, t]), n < 1 && i ? t : (i || s.notifyWith(o, [l, 1, 0]), s.resolveWith(o, [l]), !1);\n      },\n      l = s.promise({\n        elem: o,\n        props: k.extend({}, e),\n        opts: k.extend(!0, {\n          specialEasing: {},\n          easing: k.easing._default\n        }, t),\n        originalProperties: e,\n        originalOptions: t,\n        startTime: rt || ct(),\n        duration: t.duration,\n        tweens: [],\n        createTween: function createTween(e, t) {\n          var n = k.Tween(o, l.opts, e, t, l.opts.specialEasing[e] || l.opts.easing);\n          return l.tweens.push(n), n;\n        },\n        stop: function stop(e) {\n          var t = 0,\n            n = e ? l.tweens.length : 0;\n          if (a) return this;\n          for (a = !0; t < n; t++) l.tweens[t].run(1);\n          return e ? (s.notifyWith(o, [l, 1, 0]), s.resolveWith(o, [l, e])) : s.rejectWith(o, [l, e]), this;\n        }\n      }),\n      c = l.props;\n    for (!function (e, t) {\n      var n, r, i, o, a;\n      for (n in e) if (i = t[r = V(n)], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = k.cssHooks[r]) && (\"expand\" in a)) for (n in o = a.expand(o), delete e[r], o) (n in e) || (e[n] = o[n], t[n] = i);else t[r] = i;\n    }(c, l.opts.specialEasing); r < i; r++) if (n = dt.prefilters[r].call(l, o, c, l.opts)) return m(n.stop) && (k._queueHooks(l.elem, l.opts.queue).stop = n.stop.bind(n)), n;\n    return k.map(c, pt, l), m(l.opts.start) && l.opts.start.call(o, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), k.fx.timer(k.extend(u, {\n      elem: o,\n      anim: l,\n      queue: l.opts.queue\n    })), l;\n  }\n  k.Animation = k.extend(dt, {\n    tweeners: {\n      \"*\": [function (e, t) {\n        var n = this.createTween(e, t);\n        return le(n.elem, e, ne.exec(t), n), n;\n      }]\n    },\n    tweener: function tweener(e, t) {\n      m(e) ? (t = e, e = [\"*\"]) : e = e.match(R);\n      for (var n, r = 0, i = e.length; r < i; r++) n = e[r], dt.tweeners[n] = dt.tweeners[n] || [], dt.tweeners[n].unshift(t);\n    },\n    prefilters: [function (e, t, n) {\n      var r,\n        i,\n        o,\n        a,\n        s,\n        u,\n        l,\n        c,\n        f = \"width\" in t || \"height\" in t,\n        p = this,\n        d = {},\n        h = e.style,\n        g = e.nodeType && se(e),\n        v = Q.get(e, \"fxshow\");\n      for (r in n.queue || (null == (a = k._queueHooks(e, \"fx\")).unqueued && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function () {\n        a.unqueued || s();\n      }), a.unqueued++, p.always(function () {\n        p.always(function () {\n          a.unqueued--, k.queue(e, \"fx\").length || a.empty.fire();\n        });\n      })), t) if (i = t[r], st.test(i)) {\n        if (delete t[r], o = o || \"toggle\" === i, i === (g ? \"hide\" : \"show\")) {\n          if (\"show\" !== i || !v || void 0 === v[r]) continue;\n          g = !0;\n        }\n        d[r] = v && v[r] || k.style(e, r);\n      }\n      if ((u = !k.isEmptyObject(t)) || !k.isEmptyObject(d)) for (r in f && 1 === e.nodeType && (n.overflow = [h.overflow, h.overflowX, h.overflowY], null == (l = v && v.display) && (l = Q.get(e, \"display\")), \"none\" === (c = k.css(e, \"display\")) && (l ? c = l : (fe([e], !0), l = e.style.display || l, c = k.css(e, \"display\"), fe([e]))), (\"inline\" === c || \"inline-block\" === c && null != l) && \"none\" === k.css(e, \"float\") && (u || (p.done(function () {\n        h.display = l;\n      }), null == l && (c = h.display, l = \"none\" === c ? \"\" : c)), h.display = \"inline-block\")), n.overflow && (h.overflow = \"hidden\", p.always(function () {\n        h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2];\n      })), u = !1, d) u || (v ? \"hidden\" in v && (g = v.hidden) : v = Q.access(e, \"fxshow\", {\n        display: l\n      }), o && (v.hidden = !g), g && fe([e], !0), p.done(function () {\n        for (r in g || fe([e]), Q.remove(e, \"fxshow\"), d) k.style(e, r, d[r]);\n      })), u = pt(g ? v[r] : 0, r, p), r in v || (v[r] = u.start, g && (u.end = u.start, u.start = 0));\n    }],\n    prefilter: function prefilter(e, t) {\n      t ? dt.prefilters.unshift(e) : dt.prefilters.push(e);\n    }\n  }), k.speed = function (e, t, n) {\n    var r = e && \"object\" == _typeof(e) ? k.extend({}, e) : {\n      complete: n || !n && t || m(e) && e,\n      duration: e,\n      easing: n && t || t && !m(t) && t\n    };\n    return k.fx.off ? r.duration = 0 : \"number\" != typeof r.duration && (r.duration in k.fx.speeds ? r.duration = k.fx.speeds[r.duration] : r.duration = k.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = \"fx\"), r.old = r.complete, r.complete = function () {\n      m(r.old) && r.old.call(this), r.queue && k.dequeue(this, r.queue);\n    }, r;\n  }, k.fn.extend({\n    fadeTo: function fadeTo(e, t, n, r) {\n      return this.filter(se).css(\"opacity\", 0).show().end().animate({\n        opacity: t\n      }, e, n, r);\n    },\n    animate: function animate(t, e, n, r) {\n      var i = k.isEmptyObject(t),\n        o = k.speed(e, n, r),\n        a = function a() {\n          var e = dt(this, k.extend({}, t), o);\n          (i || Q.get(this, \"finish\")) && e.stop(!0);\n        };\n      return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);\n    },\n    stop: function stop(i, e, o) {\n      var a = function a(e) {\n        var t = e.stop;\n        delete e.stop, t(o);\n      };\n      return \"string\" != typeof i && (o = e, e = i, i = void 0), e && !1 !== i && this.queue(i || \"fx\", []), this.each(function () {\n        var e = !0,\n          t = null != i && i + \"queueHooks\",\n          n = k.timers,\n          r = Q.get(this);\n        if (t) r[t] && r[t].stop && a(r[t]);else for (t in r) r[t] && r[t].stop && ut.test(t) && a(r[t]);\n        for (t = n.length; t--;) n[t].elem !== this || null != i && n[t].queue !== i || (n[t].anim.stop(o), e = !1, n.splice(t, 1));\n        !e && o || k.dequeue(this, i);\n      });\n    },\n    finish: function finish(a) {\n      return !1 !== a && (a = a || \"fx\"), this.each(function () {\n        var e,\n          t = Q.get(this),\n          n = t[a + \"queue\"],\n          r = t[a + \"queueHooks\"],\n          i = k.timers,\n          o = n ? n.length : 0;\n        for (t.finish = !0, k.queue(this, a, []), r && r.stop && r.stop.call(this, !0), e = i.length; e--;) i[e].elem === this && i[e].queue === a && (i[e].anim.stop(!0), i.splice(e, 1));\n        for (e = 0; e < o; e++) n[e] && n[e].finish && n[e].finish.call(this);\n        delete t.finish;\n      });\n    }\n  }), k.each([\"toggle\", \"show\", \"hide\"], function (e, r) {\n    var i = k.fn[r];\n    k.fn[r] = function (e, t, n) {\n      return null == e || \"boolean\" == typeof e ? i.apply(this, arguments) : this.animate(ft(r, !0), e, t, n);\n    };\n  }), k.each({\n    slideDown: ft(\"show\"),\n    slideUp: ft(\"hide\"),\n    slideToggle: ft(\"toggle\"),\n    fadeIn: {\n      opacity: \"show\"\n    },\n    fadeOut: {\n      opacity: \"hide\"\n    },\n    fadeToggle: {\n      opacity: \"toggle\"\n    }\n  }, function (e, r) {\n    k.fn[e] = function (e, t, n) {\n      return this.animate(r, e, t, n);\n    };\n  }), k.timers = [], k.fx.tick = function () {\n    var e,\n      t = 0,\n      n = k.timers;\n    for (rt = Date.now(); t < n.length; t++) (e = n[t])() || n[t] !== e || n.splice(t--, 1);\n    n.length || k.fx.stop(), rt = void 0;\n  }, k.fx.timer = function (e) {\n    k.timers.push(e), k.fx.start();\n  }, k.fx.interval = 13, k.fx.start = function () {\n    it || (it = !0, lt());\n  }, k.fx.stop = function () {\n    it = null;\n  }, k.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    _default: 400\n  }, k.fn.delay = function (r, e) {\n    return r = k.fx && k.fx.speeds[r] || r, e = e || \"fx\", this.queue(e, function (e, t) {\n      var n = C.setTimeout(e, r);\n      t.stop = function () {\n        C.clearTimeout(n);\n      };\n    });\n  }, ot = E.createElement(\"input\"), at = E.createElement(\"select\").appendChild(E.createElement(\"option\")), ot.type = \"checkbox\", y.checkOn = \"\" !== ot.value, y.optSelected = at.selected, (ot = E.createElement(\"input\")).value = \"t\", ot.type = \"radio\", y.radioValue = \"t\" === ot.value;\n  var ht,\n    gt = k.expr.attrHandle;\n  k.fn.extend({\n    attr: function attr(e, t) {\n      return _(this, k.attr, e, t, 1 < arguments.length);\n    },\n    removeAttr: function removeAttr(e) {\n      return this.each(function () {\n        k.removeAttr(this, e);\n      });\n    }\n  }), k.extend({\n    attr: function attr(e, t, n) {\n      var r,\n        i,\n        o = e.nodeType;\n      if (3 !== o && 8 !== o && 2 !== o) return \"undefined\" == typeof e.getAttribute ? k.prop(e, t, n) : (1 === o && k.isXMLDoc(e) || (i = k.attrHooks[t.toLowerCase()] || (k.expr.match.bool.test(t) ? ht : void 0)), void 0 !== n ? null === n ? void k.removeAttr(e, t) : i && \"set\" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + \"\"), n) : i && \"get\" in i && null !== (r = i.get(e, t)) ? r : null == (r = k.find.attr(e, t)) ? void 0 : r);\n    },\n    attrHooks: {\n      type: {\n        set: function set(e, t) {\n          if (!y.radioValue && \"radio\" === t && A(e, \"input\")) {\n            var n = e.value;\n            return e.setAttribute(\"type\", t), n && (e.value = n), t;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(e, t) {\n      var n,\n        r = 0,\n        i = t && t.match(R);\n      if (i && 1 === e.nodeType) while (n = i[r++]) e.removeAttribute(n);\n    }\n  }), ht = {\n    set: function set(e, t, n) {\n      return !1 === t ? k.removeAttr(e, n) : e.setAttribute(n, n), n;\n    }\n  }, k.each(k.expr.match.bool.source.match(/\\w+/g), function (e, t) {\n    var a = gt[t] || k.find.attr;\n    gt[t] = function (e, t, n) {\n      var r,\n        i,\n        o = t.toLowerCase();\n      return n || (i = gt[o], gt[o] = r, r = null != a(e, t, n) ? o : null, gt[o] = i), r;\n    };\n  });\n  var vt = /^(?:input|select|textarea|button)$/i,\n    yt = /^(?:a|area)$/i;\n  function mt(e) {\n    return (e.match(R) || []).join(\" \");\n  }\n  function xt(e) {\n    return e.getAttribute && e.getAttribute(\"class\") || \"\";\n  }\n  function bt(e) {\n    return Array.isArray(e) ? e : \"string\" == typeof e && e.match(R) || [];\n  }\n  k.fn.extend({\n    prop: function prop(e, t) {\n      return _(this, k.prop, e, t, 1 < arguments.length);\n    },\n    removeProp: function removeProp(e) {\n      return this.each(function () {\n        delete this[k.propFix[e] || e];\n      });\n    }\n  }), k.extend({\n    prop: function prop(e, t, n) {\n      var r,\n        i,\n        o = e.nodeType;\n      if (3 !== o && 8 !== o && 2 !== o) return 1 === o && k.isXMLDoc(e) || (t = k.propFix[t] || t, i = k.propHooks[t]), void 0 !== n ? i && \"set\" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && \"get\" in i && null !== (r = i.get(e, t)) ? r : e[t];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(e) {\n          var t = k.find.attr(e, \"tabindex\");\n          return t ? parseInt(t, 10) : vt.test(e.nodeName) || yt.test(e.nodeName) && e.href ? 0 : -1;\n        }\n      }\n    },\n    propFix: {\n      \"for\": \"htmlFor\",\n      \"class\": \"className\"\n    }\n  }), y.optSelected || (k.propHooks.selected = {\n    get: function get(e) {\n      var t = e.parentNode;\n      return t && t.parentNode && t.parentNode.selectedIndex, null;\n    },\n    set: function set(e) {\n      var t = e.parentNode;\n      t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);\n    }\n  }), k.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n    k.propFix[this.toLowerCase()] = this;\n  }), k.fn.extend({\n    addClass: function addClass(t) {\n      var e,\n        n,\n        r,\n        i,\n        o,\n        a,\n        s,\n        u = 0;\n      if (m(t)) return this.each(function (e) {\n        k(this).addClass(t.call(this, e, xt(this)));\n      });\n      if ((e = bt(t)).length) while (n = this[u++]) if (i = xt(n), r = 1 === n.nodeType && \" \" + mt(i) + \" \") {\n        a = 0;\n        while (o = e[a++]) r.indexOf(\" \" + o + \" \") < 0 && (r += o + \" \");\n        i !== (s = mt(r)) && n.setAttribute(\"class\", s);\n      }\n      return this;\n    },\n    removeClass: function removeClass(t) {\n      var e,\n        n,\n        r,\n        i,\n        o,\n        a,\n        s,\n        u = 0;\n      if (m(t)) return this.each(function (e) {\n        k(this).removeClass(t.call(this, e, xt(this)));\n      });\n      if (!arguments.length) return this.attr(\"class\", \"\");\n      if ((e = bt(t)).length) while (n = this[u++]) if (i = xt(n), r = 1 === n.nodeType && \" \" + mt(i) + \" \") {\n        a = 0;\n        while (o = e[a++]) while (-1 < r.indexOf(\" \" + o + \" \")) r = r.replace(\" \" + o + \" \", \" \");\n        i !== (s = mt(r)) && n.setAttribute(\"class\", s);\n      }\n      return this;\n    },\n    toggleClass: function toggleClass(i, t) {\n      var o = _typeof(i),\n        a = \"string\" === o || Array.isArray(i);\n      return \"boolean\" == typeof t && a ? t ? this.addClass(i) : this.removeClass(i) : m(i) ? this.each(function (e) {\n        k(this).toggleClass(i.call(this, e, xt(this), t), t);\n      }) : this.each(function () {\n        var e, t, n, r;\n        if (a) {\n          t = 0, n = k(this), r = bt(i);\n          while (e = r[t++]) n.hasClass(e) ? n.removeClass(e) : n.addClass(e);\n        } else void 0 !== i && \"boolean\" !== o || ((e = xt(this)) && Q.set(this, \"__className__\", e), this.setAttribute && this.setAttribute(\"class\", e || !1 === i ? \"\" : Q.get(this, \"__className__\") || \"\"));\n      });\n    },\n    hasClass: function hasClass(e) {\n      var t,\n        n,\n        r = 0;\n      t = \" \" + e + \" \";\n      while (n = this[r++]) if (1 === n.nodeType && -1 < (\" \" + mt(xt(n)) + \" \").indexOf(t)) return !0;\n      return !1;\n    }\n  });\n  var wt = /\\r/g;\n  k.fn.extend({\n    val: function val(n) {\n      var r,\n        e,\n        i,\n        t = this[0];\n      return arguments.length ? (i = m(n), this.each(function (e) {\n        var t;\n        1 === this.nodeType && (null == (t = i ? n.call(this, e, k(this).val()) : n) ? t = \"\" : \"number\" == typeof t ? t += \"\" : Array.isArray(t) && (t = k.map(t, function (e) {\n          return null == e ? \"\" : e + \"\";\n        })), (r = k.valHooks[this.type] || k.valHooks[this.nodeName.toLowerCase()]) && \"set\" in r && void 0 !== r.set(this, t, \"value\") || (this.value = t));\n      })) : t ? (r = k.valHooks[t.type] || k.valHooks[t.nodeName.toLowerCase()]) && \"get\" in r && void 0 !== (e = r.get(t, \"value\")) ? e : \"string\" == typeof (e = t.value) ? e.replace(wt, \"\") : null == e ? \"\" : e : void 0;\n    }\n  }), k.extend({\n    valHooks: {\n      option: {\n        get: function get(e) {\n          var t = k.find.attr(e, \"value\");\n          return null != t ? t : mt(k.text(e));\n        }\n      },\n      select: {\n        get: function get(e) {\n          var t,\n            n,\n            r,\n            i = e.options,\n            o = e.selectedIndex,\n            a = \"select-one\" === e.type,\n            s = a ? null : [],\n            u = a ? o + 1 : i.length;\n          for (r = o < 0 ? u : a ? o : 0; r < u; r++) if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !A(n.parentNode, \"optgroup\"))) {\n            if (t = k(n).val(), a) return t;\n            s.push(t);\n          }\n          return s;\n        },\n        set: function set(e, t) {\n          var n,\n            r,\n            i = e.options,\n            o = k.makeArray(t),\n            a = i.length;\n          while (a--) ((r = i[a]).selected = -1 < k.inArray(k.valHooks.option.get(r), o)) && (n = !0);\n          return n || (e.selectedIndex = -1), o;\n        }\n      }\n    }\n  }), k.each([\"radio\", \"checkbox\"], function () {\n    k.valHooks[this] = {\n      set: function set(e, t) {\n        if (Array.isArray(t)) return e.checked = -1 < k.inArray(k(e).val(), t);\n      }\n    }, y.checkOn || (k.valHooks[this].get = function (e) {\n      return null === e.getAttribute(\"value\") ? \"on\" : e.value;\n    });\n  }), y.focusin = \"onfocusin\" in C;\n  var Tt = /^(?:focusinfocus|focusoutblur)$/,\n    Ct = function Ct(e) {\n      e.stopPropagation();\n    };\n  k.extend(k.event, {\n    trigger: function trigger(e, t, n, r) {\n      var i,\n        o,\n        a,\n        s,\n        u,\n        l,\n        c,\n        f,\n        p = [n || E],\n        d = v.call(e, \"type\") ? e.type : e,\n        h = v.call(e, \"namespace\") ? e.namespace.split(\".\") : [];\n      if (o = f = a = n = n || E, 3 !== n.nodeType && 8 !== n.nodeType && !Tt.test(d + k.event.triggered) && (-1 < d.indexOf(\".\") && (d = (h = d.split(\".\")).shift(), h.sort()), u = d.indexOf(\":\") < 0 && \"on\" + d, (e = e[k.expando] ? e : new k.Event(d, \"object\" == _typeof(e) && e)).isTrigger = r ? 2 : 3, e.namespace = h.join(\".\"), e.rnamespace = e.namespace ? new RegExp(\"(^|\\\\.)\" + h.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null, e.result = void 0, e.target || (e.target = n), t = null == t ? [e] : k.makeArray(t, [e]), c = k.event.special[d] || {}, r || !c.trigger || !1 !== c.trigger.apply(n, t))) {\n        if (!r && !c.noBubble && !x(n)) {\n          for (s = c.delegateType || d, Tt.test(s + d) || (o = o.parentNode); o; o = o.parentNode) p.push(o), a = o;\n          a === (n.ownerDocument || E) && p.push(a.defaultView || a.parentWindow || C);\n        }\n        i = 0;\n        while ((o = p[i++]) && !e.isPropagationStopped()) f = o, e.type = 1 < i ? s : c.bindType || d, (l = (Q.get(o, \"events\") || {})[e.type] && Q.get(o, \"handle\")) && l.apply(o, t), (l = u && o[u]) && l.apply && G(o) && (e.result = l.apply(o, t), !1 === e.result && e.preventDefault());\n        return e.type = d, r || e.isDefaultPrevented() || c._default && !1 !== c._default.apply(p.pop(), t) || !G(n) || u && m(n[d]) && !x(n) && ((a = n[u]) && (n[u] = null), k.event.triggered = d, e.isPropagationStopped() && f.addEventListener(d, Ct), n[d](), e.isPropagationStopped() && f.removeEventListener(d, Ct), k.event.triggered = void 0, a && (n[u] = a)), e.result;\n      }\n    },\n    simulate: function simulate(e, t, n) {\n      var r = k.extend(new k.Event(), n, {\n        type: e,\n        isSimulated: !0\n      });\n      k.event.trigger(r, null, t);\n    }\n  }), k.fn.extend({\n    trigger: function trigger(e, t) {\n      return this.each(function () {\n        k.event.trigger(e, t, this);\n      });\n    },\n    triggerHandler: function triggerHandler(e, t) {\n      var n = this[0];\n      if (n) return k.event.trigger(e, t, n, !0);\n    }\n  }), y.focusin || k.each({\n    focus: \"focusin\",\n    blur: \"focusout\"\n  }, function (n, r) {\n    var i = function i(e) {\n      k.event.simulate(r, e.target, k.event.fix(e));\n    };\n    k.event.special[r] = {\n      setup: function setup() {\n        var e = this.ownerDocument || this,\n          t = Q.access(e, r);\n        t || e.addEventListener(n, i, !0), Q.access(e, r, (t || 0) + 1);\n      },\n      teardown: function teardown() {\n        var e = this.ownerDocument || this,\n          t = Q.access(e, r) - 1;\n        t ? Q.access(e, r, t) : (e.removeEventListener(n, i, !0), Q.remove(e, r));\n      }\n    };\n  });\n  var Et = C.location,\n    kt = Date.now(),\n    St = /\\?/;\n  k.parseXML = function (e) {\n    var t;\n    if (!e || \"string\" != typeof e) return null;\n    try {\n      t = new C.DOMParser().parseFromString(e, \"text/xml\");\n    } catch (e) {\n      t = void 0;\n    }\n    return t && !t.getElementsByTagName(\"parsererror\").length || k.error(\"Invalid XML: \" + e), t;\n  };\n  var Nt = /\\[\\]$/,\n    At = /\\r?\\n/g,\n    Dt = /^(?:submit|button|image|reset|file)$/i,\n    jt = /^(?:input|select|textarea|keygen)/i;\n  function qt(n, e, r, i) {\n    var t;\n    if (Array.isArray(e)) k.each(e, function (e, t) {\n      r || Nt.test(n) ? i(n, t) : qt(n + \"[\" + (\"object\" == _typeof(t) && null != t ? e : \"\") + \"]\", t, r, i);\n    });else if (r || \"object\" !== w(e)) i(n, e);else for (t in e) qt(n + \"[\" + t + \"]\", e[t], r, i);\n  }\n  k.param = function (e, t) {\n    var n,\n      r = [],\n      i = function i(e, t) {\n        var n = m(t) ? t() : t;\n        r[r.length] = encodeURIComponent(e) + \"=\" + encodeURIComponent(null == n ? \"\" : n);\n      };\n    if (null == e) return \"\";\n    if (Array.isArray(e) || e.jquery && !k.isPlainObject(e)) k.each(e, function () {\n      i(this.name, this.value);\n    });else for (n in e) qt(n, e[n], t, i);\n    return r.join(\"&\");\n  }, k.fn.extend({\n    serialize: function serialize() {\n      return k.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        var e = k.prop(this, \"elements\");\n        return e ? k.makeArray(e) : this;\n      }).filter(function () {\n        var e = this.type;\n        return this.name && !k(this).is(\":disabled\") && jt.test(this.nodeName) && !Dt.test(e) && (this.checked || !pe.test(e));\n      }).map(function (e, t) {\n        var n = k(this).val();\n        return null == n ? null : Array.isArray(n) ? k.map(n, function (e) {\n          return {\n            name: t.name,\n            value: e.replace(At, \"\\r\\n\")\n          };\n        }) : {\n          name: t.name,\n          value: n.replace(At, \"\\r\\n\")\n        };\n      }).get();\n    }\n  });\n  var Lt = /%20/g,\n    Ht = /#.*$/,\n    Ot = /([?&])_=[^&]*/,\n    Pt = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm,\n    Rt = /^(?:GET|HEAD)$/,\n    Mt = /^\\/\\//,\n    It = {},\n    Wt = {},\n    $t = \"*/\".concat(\"*\"),\n    Ft = E.createElement(\"a\");\n  function Bt(o) {\n    return function (e, t) {\n      \"string\" != typeof e && (t = e, e = \"*\");\n      var n,\n        r = 0,\n        i = e.toLowerCase().match(R) || [];\n      if (m(t)) while (n = i[r++]) \"+\" === n[0] ? (n = n.slice(1) || \"*\", (o[n] = o[n] || []).unshift(t)) : (o[n] = o[n] || []).push(t);\n    };\n  }\n  function _t(t, i, o, a) {\n    var s = {},\n      u = t === Wt;\n    function l(e) {\n      var r;\n      return s[e] = !0, k.each(t[e] || [], function (e, t) {\n        var n = t(i, o, a);\n        return \"string\" != typeof n || u || s[n] ? u ? !(r = n) : void 0 : (i.dataTypes.unshift(n), l(n), !1);\n      }), r;\n    }\n    return l(i.dataTypes[0]) || !s[\"*\"] && l(\"*\");\n  }\n  function zt(e, t) {\n    var n,\n      r,\n      i = k.ajaxSettings.flatOptions || {};\n    for (n in t) void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);\n    return r && k.extend(!0, e, r), e;\n  }\n  Ft.href = Et.href, k.extend({\n    active: 0,\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: Et.href,\n      type: \"GET\",\n      isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),\n      global: !0,\n      processData: !0,\n      async: !0,\n      contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n      accepts: {\n        \"*\": $t,\n        text: \"text/plain\",\n        html: \"text/html\",\n        xml: \"application/xml, text/xml\",\n        json: \"application/json, text/javascript\"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: \"responseXML\",\n        text: \"responseText\",\n        json: \"responseJSON\"\n      },\n      converters: {\n        \"* text\": String,\n        \"text html\": !0,\n        \"text json\": JSON.parse,\n        \"text xml\": k.parseXML\n      },\n      flatOptions: {\n        url: !0,\n        context: !0\n      }\n    },\n    ajaxSetup: function ajaxSetup(e, t) {\n      return t ? zt(zt(e, k.ajaxSettings), t) : zt(k.ajaxSettings, e);\n    },\n    ajaxPrefilter: Bt(It),\n    ajaxTransport: Bt(Wt),\n    ajax: function ajax(e, t) {\n      \"object\" == _typeof(e) && (t = e, e = void 0), t = t || {};\n      var c,\n        f,\n        p,\n        n,\n        d,\n        r,\n        h,\n        g,\n        i,\n        o,\n        v = k.ajaxSetup({}, t),\n        y = v.context || v,\n        m = v.context && (y.nodeType || y.jquery) ? k(y) : k.event,\n        x = k.Deferred(),\n        b = k.Callbacks(\"once memory\"),\n        w = v.statusCode || {},\n        a = {},\n        s = {},\n        u = \"canceled\",\n        T = {\n          readyState: 0,\n          getResponseHeader: function getResponseHeader(e) {\n            var t;\n            if (h) {\n              if (!n) {\n                n = {};\n                while (t = Pt.exec(p)) n[t[1].toLowerCase() + \" \"] = (n[t[1].toLowerCase() + \" \"] || []).concat(t[2]);\n              }\n              t = n[e.toLowerCase() + \" \"];\n            }\n            return null == t ? null : t.join(\", \");\n          },\n          getAllResponseHeaders: function getAllResponseHeaders() {\n            return h ? p : null;\n          },\n          setRequestHeader: function setRequestHeader(e, t) {\n            return null == h && (e = s[e.toLowerCase()] = s[e.toLowerCase()] || e, a[e] = t), this;\n          },\n          overrideMimeType: function overrideMimeType(e) {\n            return null == h && (v.mimeType = e), this;\n          },\n          statusCode: function statusCode(e) {\n            var t;\n            if (e) if (h) T.always(e[T.status]);else for (t in e) w[t] = [w[t], e[t]];\n            return this;\n          },\n          abort: function abort(e) {\n            var t = e || u;\n            return c && c.abort(t), l(0, t), this;\n          }\n        };\n      if (x.promise(T), v.url = ((e || v.url || Et.href) + \"\").replace(Mt, Et.protocol + \"//\"), v.type = t.method || t.type || v.method || v.type, v.dataTypes = (v.dataType || \"*\").toLowerCase().match(R) || [\"\"], null == v.crossDomain) {\n        r = E.createElement(\"a\");\n        try {\n          r.href = v.url, r.href = r.href, v.crossDomain = Ft.protocol + \"//\" + Ft.host != r.protocol + \"//\" + r.host;\n        } catch (e) {\n          v.crossDomain = !0;\n        }\n      }\n      if (v.data && v.processData && \"string\" != typeof v.data && (v.data = k.param(v.data, v.traditional)), _t(It, v, t, T), h) return T;\n      for (i in (g = k.event && v.global) && 0 == k.active++ && k.event.trigger(\"ajaxStart\"), v.type = v.type.toUpperCase(), v.hasContent = !Rt.test(v.type), f = v.url.replace(Ht, \"\"), v.hasContent ? v.data && v.processData && 0 === (v.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && (v.data = v.data.replace(Lt, \"+\")) : (o = v.url.slice(f.length), v.data && (v.processData || \"string\" == typeof v.data) && (f += (St.test(f) ? \"&\" : \"?\") + v.data, delete v.data), !1 === v.cache && (f = f.replace(Ot, \"$1\"), o = (St.test(f) ? \"&\" : \"?\") + \"_=\" + kt++ + o), v.url = f + o), v.ifModified && (k.lastModified[f] && T.setRequestHeader(\"If-Modified-Since\", k.lastModified[f]), k.etag[f] && T.setRequestHeader(\"If-None-Match\", k.etag[f])), (v.data && v.hasContent && !1 !== v.contentType || t.contentType) && T.setRequestHeader(\"Content-Type\", v.contentType), T.setRequestHeader(\"Accept\", v.dataTypes[0] && v.accepts[v.dataTypes[0]] ? v.accepts[v.dataTypes[0]] + (\"*\" !== v.dataTypes[0] ? \", \" + $t + \"; q=0.01\" : \"\") : v.accepts[\"*\"]), v.headers) T.setRequestHeader(i, v.headers[i]);\n      if (v.beforeSend && (!1 === v.beforeSend.call(y, T, v) || h)) return T.abort();\n      if (u = \"abort\", b.add(v.complete), T.done(v.success), T.fail(v.error), c = _t(Wt, v, t, T)) {\n        if (T.readyState = 1, g && m.trigger(\"ajaxSend\", [T, v]), h) return T;\n        v.async && 0 < v.timeout && (d = C.setTimeout(function () {\n          T.abort(\"timeout\");\n        }, v.timeout));\n        try {\n          h = !1, c.send(a, l);\n        } catch (e) {\n          if (h) throw e;\n          l(-1, e);\n        }\n      } else l(-1, \"No Transport\");\n      function l(e, t, n, r) {\n        var i,\n          o,\n          a,\n          s,\n          u,\n          l = t;\n        h || (h = !0, d && C.clearTimeout(d), c = void 0, p = r || \"\", T.readyState = 0 < e ? 4 : 0, i = 200 <= e && e < 300 || 304 === e, n && (s = function (e, t, n) {\n          var r,\n            i,\n            o,\n            a,\n            s = e.contents,\n            u = e.dataTypes;\n          while (\"*\" === u[0]) u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader(\"Content-Type\"));\n          if (r) for (i in s) if (s[i] && s[i].test(r)) {\n            u.unshift(i);\n            break;\n          }\n          if (u[0] in n) o = u[0];else {\n            for (i in n) {\n              if (!u[0] || e.converters[i + \" \" + u[0]]) {\n                o = i;\n                break;\n              }\n              a || (a = i);\n            }\n            o = o || a;\n          }\n          if (o) return o !== u[0] && u.unshift(o), n[o];\n        }(v, T, n)), s = function (e, t, n, r) {\n          var i,\n            o,\n            a,\n            s,\n            u,\n            l = {},\n            c = e.dataTypes.slice();\n          if (c[1]) for (a in e.converters) l[a.toLowerCase()] = e.converters[a];\n          o = c.shift();\n          while (o) if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift()) if (\"*\" === o) o = u;else if (\"*\" !== u && u !== o) {\n            if (!(a = l[u + \" \" + o] || l[\"* \" + o])) for (i in l) if ((s = i.split(\" \"))[1] === o && (a = l[u + \" \" + s[0]] || l[\"* \" + s[0]])) {\n              !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));\n              break;\n            }\n            if (!0 !== a) if (a && e[\"throws\"]) t = a(t);else try {\n              t = a(t);\n            } catch (e) {\n              return {\n                state: \"parsererror\",\n                error: a ? e : \"No conversion from \" + u + \" to \" + o\n              };\n            }\n          }\n          return {\n            state: \"success\",\n            data: t\n          };\n        }(v, s, T, i), i ? (v.ifModified && ((u = T.getResponseHeader(\"Last-Modified\")) && (k.lastModified[f] = u), (u = T.getResponseHeader(\"etag\")) && (k.etag[f] = u)), 204 === e || \"HEAD\" === v.type ? l = \"nocontent\" : 304 === e ? l = \"notmodified\" : (l = s.state, o = s.data, i = !(a = s.error))) : (a = l, !e && l || (l = \"error\", e < 0 && (e = 0))), T.status = e, T.statusText = (t || l) + \"\", i ? x.resolveWith(y, [o, l, T]) : x.rejectWith(y, [T, l, a]), T.statusCode(w), w = void 0, g && m.trigger(i ? \"ajaxSuccess\" : \"ajaxError\", [T, v, i ? o : a]), b.fireWith(y, [T, l]), g && (m.trigger(\"ajaxComplete\", [T, v]), --k.active || k.event.trigger(\"ajaxStop\")));\n      }\n      return T;\n    },\n    getJSON: function getJSON(e, t, n) {\n      return k.get(e, t, n, \"json\");\n    },\n    getScript: function getScript(e, t) {\n      return k.get(e, void 0, t, \"script\");\n    }\n  }), k.each([\"get\", \"post\"], function (e, i) {\n    k[i] = function (e, t, n, r) {\n      return m(t) && (r = r || n, n = t, t = void 0), k.ajax(k.extend({\n        url: e,\n        type: i,\n        dataType: r,\n        data: t,\n        success: n\n      }, k.isPlainObject(e) && e));\n    };\n  }), k._evalUrl = function (e, t) {\n    return k.ajax({\n      url: e,\n      type: \"GET\",\n      dataType: \"script\",\n      cache: !0,\n      async: !1,\n      global: !1,\n      converters: {\n        \"text script\": function textScript() {}\n      },\n      dataFilter: function dataFilter(e) {\n        k.globalEval(e, t);\n      }\n    });\n  }, k.fn.extend({\n    wrapAll: function wrapAll(e) {\n      var t;\n      return this[0] && (m(e) && (e = e.call(this[0])), t = k(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () {\n        var e = this;\n        while (e.firstElementChild) e = e.firstElementChild;\n        return e;\n      }).append(this)), this;\n    },\n    wrapInner: function wrapInner(n) {\n      return m(n) ? this.each(function (e) {\n        k(this).wrapInner(n.call(this, e));\n      }) : this.each(function () {\n        var e = k(this),\n          t = e.contents();\n        t.length ? t.wrapAll(n) : e.append(n);\n      });\n    },\n    wrap: function wrap(t) {\n      var n = m(t);\n      return this.each(function (e) {\n        k(this).wrapAll(n ? t.call(this, e) : t);\n      });\n    },\n    unwrap: function unwrap(e) {\n      return this.parent(e).not(\"body\").each(function () {\n        k(this).replaceWith(this.childNodes);\n      }), this;\n    }\n  }), k.expr.pseudos.hidden = function (e) {\n    return !k.expr.pseudos.visible(e);\n  }, k.expr.pseudos.visible = function (e) {\n    return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);\n  }, k.ajaxSettings.xhr = function () {\n    try {\n      return new C.XMLHttpRequest();\n    } catch (e) {}\n  };\n  var Ut = {\n      0: 200,\n      1223: 204\n    },\n    Xt = k.ajaxSettings.xhr();\n  y.cors = !!Xt && \"withCredentials\" in Xt, y.ajax = Xt = !!Xt, k.ajaxTransport(function (i) {\n    var _o, a;\n    if (y.cors || Xt && !i.crossDomain) return {\n      send: function send(e, t) {\n        var n,\n          r = i.xhr();\n        if (r.open(i.type, i.url, i.async, i.username, i.password), i.xhrFields) for (n in i.xhrFields) r[n] = i.xhrFields[n];\n        for (n in i.mimeType && r.overrideMimeType && r.overrideMimeType(i.mimeType), i.crossDomain || e[\"X-Requested-With\"] || (e[\"X-Requested-With\"] = \"XMLHttpRequest\"), e) r.setRequestHeader(n, e[n]);\n        _o = function o(e) {\n          return function () {\n            _o && (_o = a = r.onload = r.onerror = r.onabort = r.ontimeout = r.onreadystatechange = null, \"abort\" === e ? r.abort() : \"error\" === e ? \"number\" != typeof r.status ? t(0, \"error\") : t(r.status, r.statusText) : t(Ut[r.status] || r.status, r.statusText, \"text\" !== (r.responseType || \"text\") || \"string\" != typeof r.responseText ? {\n              binary: r.response\n            } : {\n              text: r.responseText\n            }, r.getAllResponseHeaders()));\n          };\n        }, r.onload = _o(), a = r.onerror = r.ontimeout = _o(\"error\"), void 0 !== r.onabort ? r.onabort = a : r.onreadystatechange = function () {\n          4 === r.readyState && C.setTimeout(function () {\n            _o && a();\n          });\n        }, _o = _o(\"abort\");\n        try {\n          r.send(i.hasContent && i.data || null);\n        } catch (e) {\n          if (_o) throw e;\n        }\n      },\n      abort: function abort() {\n        _o && _o();\n      }\n    };\n  }), k.ajaxPrefilter(function (e) {\n    e.crossDomain && (e.contents.script = !1);\n  }), k.ajaxSetup({\n    accepts: {\n      script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      \"text script\": function textScript(e) {\n        return k.globalEval(e), e;\n      }\n    }\n  }), k.ajaxPrefilter(\"script\", function (e) {\n    void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = \"GET\");\n  }), k.ajaxTransport(\"script\", function (n) {\n    var r, _i;\n    if (n.crossDomain || n.scriptAttrs) return {\n      send: function send(e, t) {\n        r = k(\"<script>\").attr(n.scriptAttrs || {}).prop({\n          charset: n.scriptCharset,\n          src: n.url\n        }).on(\"load error\", _i = function i(e) {\n          r.remove(), _i = null, e && t(\"error\" === e.type ? 404 : 200, e.type);\n        }), E.head.appendChild(r[0]);\n      },\n      abort: function abort() {\n        _i && _i();\n      }\n    };\n  });\n  var Vt,\n    Gt = [],\n    Yt = /(=)\\?(?=&|$)|\\?\\?/;\n  k.ajaxSetup({\n    jsonp: \"callback\",\n    jsonpCallback: function jsonpCallback() {\n      var e = Gt.pop() || k.expando + \"_\" + kt++;\n      return this[e] = !0, e;\n    }\n  }), k.ajaxPrefilter(\"json jsonp\", function (e, t, n) {\n    var r,\n      i,\n      o,\n      a = !1 !== e.jsonp && (Yt.test(e.url) ? \"url\" : \"string\" == typeof e.data && 0 === (e.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") && Yt.test(e.data) && \"data\");\n    if (a || \"jsonp\" === e.dataTypes[0]) return r = e.jsonpCallback = m(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, a ? e[a] = e[a].replace(Yt, \"$1\" + r) : !1 !== e.jsonp && (e.url += (St.test(e.url) ? \"&\" : \"?\") + e.jsonp + \"=\" + r), e.converters[\"script json\"] = function () {\n      return o || k.error(r + \" was not called\"), o[0];\n    }, e.dataTypes[0] = \"json\", i = C[r], C[r] = function () {\n      o = arguments;\n    }, n.always(function () {\n      void 0 === i ? k(C).removeProp(r) : C[r] = i, e[r] && (e.jsonpCallback = t.jsonpCallback, Gt.push(r)), o && m(i) && i(o[0]), o = i = void 0;\n    }), \"script\";\n  }), y.createHTMLDocument = ((Vt = E.implementation.createHTMLDocument(\"\").body).innerHTML = \"<form></form><form></form>\", 2 === Vt.childNodes.length), k.parseHTML = function (e, t, n) {\n    return \"string\" != typeof e ? [] : (\"boolean\" == typeof t && (n = t, t = !1), t || (y.createHTMLDocument ? ((r = (t = E.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href = E.location.href, t.head.appendChild(r)) : t = E), o = !n && [], (i = D.exec(e)) ? [t.createElement(i[1])] : (i = we([e], t, o), o && o.length && k(o).remove(), k.merge([], i.childNodes)));\n    var r, i, o;\n  }, k.fn.load = function (e, t, n) {\n    var r,\n      i,\n      o,\n      a = this,\n      s = e.indexOf(\" \");\n    return -1 < s && (r = mt(e.slice(s)), e = e.slice(0, s)), m(t) ? (n = t, t = void 0) : t && \"object\" == _typeof(t) && (i = \"POST\"), 0 < a.length && k.ajax({\n      url: e,\n      type: i || \"GET\",\n      dataType: \"html\",\n      data: t\n    }).done(function (e) {\n      o = arguments, a.html(r ? k(\"<div>\").append(k.parseHTML(e)).find(r) : e);\n    }).always(n && function (e, t) {\n      a.each(function () {\n        n.apply(this, o || [e.responseText, t, e]);\n      });\n    }), this;\n  }, k.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (e, t) {\n    k.fn[t] = function (e) {\n      return this.on(t, e);\n    };\n  }), k.expr.pseudos.animated = function (t) {\n    return k.grep(k.timers, function (e) {\n      return t === e.elem;\n    }).length;\n  }, k.offset = {\n    setOffset: function setOffset(e, t, n) {\n      var r,\n        i,\n        o,\n        a,\n        s,\n        u,\n        l = k.css(e, \"position\"),\n        c = k(e),\n        f = {};\n      \"static\" === l && (e.style.position = \"relative\"), s = c.offset(), o = k.css(e, \"top\"), u = k.css(e, \"left\"), (\"absolute\" === l || \"fixed\" === l) && -1 < (o + u).indexOf(\"auto\") ? (a = (r = c.position()).top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), m(t) && (t = t.call(e, n, k.extend({}, s))), null != t.top && (f.top = t.top - s.top + a), null != t.left && (f.left = t.left - s.left + i), \"using\" in t ? t.using.call(e, f) : c.css(f);\n    }\n  }, k.fn.extend({\n    offset: function offset(t) {\n      if (arguments.length) return void 0 === t ? this : this.each(function (e) {\n        k.offset.setOffset(this, t, e);\n      });\n      var e,\n        n,\n        r = this[0];\n      return r ? r.getClientRects().length ? (e = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, {\n        top: e.top + n.pageYOffset,\n        left: e.left + n.pageXOffset\n      }) : {\n        top: 0,\n        left: 0\n      } : void 0;\n    },\n    position: function position() {\n      if (this[0]) {\n        var e,\n          t,\n          n,\n          r = this[0],\n          i = {\n            top: 0,\n            left: 0\n          };\n        if (\"fixed\" === k.css(r, \"position\")) t = r.getBoundingClientRect();else {\n          t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement;\n          while (e && (e === n.body || e === n.documentElement) && \"static\" === k.css(e, \"position\")) e = e.parentNode;\n          e && e !== r && 1 === e.nodeType && ((i = k(e).offset()).top += k.css(e, \"borderTopWidth\", !0), i.left += k.css(e, \"borderLeftWidth\", !0));\n        }\n        return {\n          top: t.top - i.top - k.css(r, \"marginTop\", !0),\n          left: t.left - i.left - k.css(r, \"marginLeft\", !0)\n        };\n      }\n    },\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var e = this.offsetParent;\n        while (e && \"static\" === k.css(e, \"position\")) e = e.offsetParent;\n        return e || ie;\n      });\n    }\n  }), k.each({\n    scrollLeft: \"pageXOffset\",\n    scrollTop: \"pageYOffset\"\n  }, function (t, i) {\n    var o = \"pageYOffset\" === i;\n    k.fn[t] = function (e) {\n      return _(this, function (e, t, n) {\n        var r;\n        if (x(e) ? r = e : 9 === e.nodeType && (r = e.defaultView), void 0 === n) return r ? r[i] : e[t];\n        r ? r.scrollTo(o ? r.pageXOffset : n, o ? n : r.pageYOffset) : e[t] = n;\n      }, t, e, arguments.length);\n    };\n  }), k.each([\"top\", \"left\"], function (e, n) {\n    k.cssHooks[n] = ze(y.pixelPosition, function (e, t) {\n      if (t) return t = _e(e, n), $e.test(t) ? k(e).position()[n] + \"px\" : t;\n    });\n  }), k.each({\n    Height: \"height\",\n    Width: \"width\"\n  }, function (a, s) {\n    k.each({\n      padding: \"inner\" + a,\n      content: s,\n      \"\": \"outer\" + a\n    }, function (r, o) {\n      k.fn[o] = function (e, t) {\n        var n = arguments.length && (r || \"boolean\" != typeof e),\n          i = r || (!0 === e || !0 === t ? \"margin\" : \"border\");\n        return _(this, function (e, t, n) {\n          var r;\n          return x(e) ? 0 === o.indexOf(\"outer\") ? e[\"inner\" + a] : e.document.documentElement[\"client\" + a] : 9 === e.nodeType ? (r = e.documentElement, Math.max(e.body[\"scroll\" + a], r[\"scroll\" + a], e.body[\"offset\" + a], r[\"offset\" + a], r[\"client\" + a])) : void 0 === n ? k.css(e, t, i) : k.style(e, t, n, i);\n        }, s, n ? e : void 0, n);\n      };\n    });\n  }), k.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"), function (e, n) {\n    k.fn[n] = function (e, t) {\n      return 0 < arguments.length ? this.on(n, null, e, t) : this.trigger(n);\n    };\n  }), k.fn.extend({\n    hover: function hover(e, t) {\n      return this.mouseenter(e).mouseleave(t || e);\n    }\n  }), k.fn.extend({\n    bind: function bind(e, t, n) {\n      return this.on(e, null, t, n);\n    },\n    unbind: function unbind(e, t) {\n      return this.off(e, null, t);\n    },\n    delegate: function delegate(e, t, n, r) {\n      return this.on(t, e, n, r);\n    },\n    undelegate: function undelegate(e, t, n) {\n      return 1 === arguments.length ? this.off(e, \"**\") : this.off(t, e || \"**\", n);\n    }\n  }), k.proxy = function (e, t) {\n    var n, r, i;\n    if (\"string\" == typeof t && (n = e[t], t = e, e = n), m(e)) return r = s.call(arguments, 2), (i = function i() {\n      return e.apply(t || this, r.concat(s.call(arguments)));\n    }).guid = e.guid = e.guid || k.guid++, i;\n  }, k.holdReady = function (e) {\n    e ? k.readyWait++ : k.ready(!0);\n  }, k.isArray = Array.isArray, k.parseJSON = JSON.parse, k.nodeName = A, k.isFunction = m, k.isWindow = x, k.camelCase = V, k.type = w, k.now = Date.now, k.isNumeric = function (e) {\n    var t = k.type(e);\n    return (\"number\" === t || \"string\" === t) && !isNaN(e - parseFloat(e));\n  },  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return k;\n  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  var Qt = C.jQuery,\n    Jt = C.$;\n  return k.noConflict = function (e) {\n    return C.$ === k && (C.$ = Jt), e && C.jQuery === k && (C.jQuery = Qt), k;\n  }, e || (C.jQuery = C.$ = k), k;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app/jquery.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/app/jquery.min.js");
/******/ 	
/******/ })()
;